/*
  * @(#)AascOracleTrackingOrderInfoDAO.java     19/01/2006
  * Copyright (c) 2005-2006 Apps Associates Pvt. Ltd.
  * All rights reserved.
  */

package com.aasc.erp.model;

import com.aasc.erp.bean.AascShipmentPackageInfo;
import com.aasc.erp.bean.AascShipmentHeaderInfo;
import com.aasc.erp.bean.AascTrackingOrderInfo;

import com.aasc.erp.util.AascLogger;

import java.math.BigDecimal;

import java.sql.Date; 
import java.sql.Timestamp;
import java.sql.ResultSet;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.logging.Logger;

import javax.sql.DataSource;


import oracle.jdbc.OracleTypes;

import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;

/*
  *@author Eshwari M
  *@version 1.1
  */

/* ========================================================================================
  Date         Resource     Change history
  ------------------------------------------------------------------------------------------
 27/11/2014  Sunanda.k     added Spring JDBC logic for the following code
 17/12/2014   Eshwari M     Renamed this file name from AascOracleTrackingDelvieryInfoDAO to AascPracleTrackingOrderInfoDAO for SC Lite
 31/12/2014   Eshwari M     Moved getTrackingDetails, saveTrackingDetails methods from AascOracleReportsInfoDAO class to this class.
 02/01/2015   Y Pradeep     Added CUSTOMER_NAME while retreving tracking details of a pirticular ordernumber.
 19/01/2015   Y Pradeep     Modified code to remove unused variables and commented code as suggested in Code Review document and ran self audit.
 19/01/2105   Y Pradeep     Added code to get Ship To Location name. For bug #2537.
 20/01/2015   Y Pradeep     Modified auther and version, also removed commented code.
 20/01/2015   Y Pradeep     Added nullStrToSpc in getHeaderBean method.
 02/02/2015   Eshwari M     Moved getTrackingDetails, saveTrackingDetails methods from this class to AascOracleReportsInfoDAO class as these methods are related to Report
 14/03/2015   Eshwari M     Removed queryTimeOut
 01/11/2015   Mahesh        Added code for Stamps.com Integration
 09/11/2015   Eshwari M     Modified code by changing ship to address line1 in the db call from ADDRESS1 to SHIP_TO_ADDRESS1 to fix bug # 3838
  ========================================================================================*/
 /**
   AascOracleTrackingOrderInfoDAO class implements AascTrackingOrderInfoDAO interface class.
   This class retrieves Header information,Package information and list of 
   deliveryNames from the database and sets to the AascTrackingOrderInfo bean class.
  */

public class AascOracleTrackingOrderInfoDAO implements AascTrackingOrderInfoDAO {
    private String trackingNumber; // sequence number for UPS Delivery generated by connectship
    private String orderNumber; // sequence number to identify shipment
    private int status; // returns status from the data base package 
    AascOracleDAOFactory connectionFactory = new AascOracleDAOFactory();

    private LinkedList packageLinkedList = null; // LinkedList for package information 
    private LinkedList orderLinkedList = null; // LinkedList for deliveryNames
    private AascTrackingOrderInfo aascTrackingOrderInfo = new AascTrackingOrderInfo();
    private AascShipmentHeaderInfo aascHeaderInfo = new AascShipmentHeaderInfo(); // creating object of AascHeaderInfo class

    private ResultSet orderResultSet = null;

    private SimpleJdbcCall simpleJdbcCall;
    private static Logger logger = AascLogger.getLogger("AascOracleTrackingOrderInfoDAO");

    /** Default constructor. */
    public AascOracleTrackingOrderInfoDAO() {
    }

    /**
      nullStrToSpc() method replaces null values with space
      @return String that is ""
      @param object of type Object
     */
    String nullStrToSpc(Object object) {
        String spcStr = "";

        if (object == null || "null".equalsIgnoreCase(object.toString())) {
            return spcStr;
        } else {
            return object.toString();
        }
    }

    /**
      Method getOrderInfo() passes orderNumber as input parameter and gets
      header and package information from the database.
      @param orderNumber String.
      @return aascTrackingOrderInfo object of AascTrackingOrderInfoDAO class.
      */
      public AascTrackingOrderInfo getOrderInfo(String orderNumber, int clientId, int locationId) {
         logger.info("Entered getOrderInfo()");
         this.orderNumber = orderNumber;
//         logger.info("orderNumber is :" + orderNumber);
         try {
             DataSource datasource = 
                 connectionFactory.createDataSource(); // this method returns the datasources object

             SqlParameterSource inputparams = new MapSqlParameterSource().addValue("ip_order_number", orderNumber)
                                                                         .addValue("ip_client_id", clientId)
                                                                         .addValue("IP_LOCATION_ID", locationId);

             simpleJdbcCall = new SimpleJdbcCall(datasource).withCatalogName("aasc_erp_track_pkg")
                                                            .withProcedureName("get_order_details")
                                                            .declareParameters(new SqlOutParameter("OP_STATUS", Types.INTEGER))
                                                            .declareParameters(new SqlOutParameter("AASC_GET_ORDER_DETAILS", OracleTypes.CURSOR))
                                                            .declareParameters(new SqlOutParameter("aasc_get_pkg_details", OracleTypes.CURSOR));

             Map<String, Object> out = simpleJdbcCall.execute(inputparams);

//             logger.info("After Execute");
//             logger.info("out ::: " + out.toString());
             status = Integer.parseInt(String.valueOf(out.get("OP_STATUS")));
             ArrayList ordersList = (ArrayList)out.get("OP_ORDER_DETAILS");
//             logger.info("Array List map values ::::::::::::::::" + ordersList.toString());
             Iterator ordersIterator = ordersList.iterator();

//             logger.info("ordersList size : " + ordersList.size());
             
             ArrayList packagesList = (ArrayList)out.get("OP_PKG_DETAILS");
//             logger.info("Array List map values ::::::::::::::::" + packagesList.toString());
             Iterator pkgsIterator = packagesList.iterator();
   
             if (status == 0) // status == 0 for success
             {
                 AascShipmentHeaderInfo headerBean = getHeaderBean(ordersIterator); // calling getHeaderInfo() to get header information
                 LinkedList packageList = getPackageBean(pkgsIterator); // calling getPackageInfo() to catch the Linkedlist containing list of packages

                 aascTrackingOrderInfo.setReturnStatus(status); // setting the status
                 aascTrackingOrderInfo.setHeaderInfo(headerBean); // setting the HeaderInformation object
                 aascTrackingOrderInfo.setPackageInfo(packageList); // setting the PackageInformation LinkedList object
                 aascTrackingOrderInfo.setLocationId(locationId);  
             }
             else // if status is not equal to 0 setting to null
             {
                  aascTrackingOrderInfo.setReturnStatus(status);
                  aascTrackingOrderInfo.setHeaderInfo(null);
                  aascTrackingOrderInfo.setPackageInfo(null);
             }
//             logger.info("Status of aasc_erp_track_pkg.get_order_details procedure :" +status);
         } catch (Exception e) {
             logger.severe("Exception::"+e.getMessage());
         }logger.info("Exit from getOrderInfo()"); 
         return aascTrackingOrderInfo; 
     }  

    /**
      Method getTrackingOrderInfo() passes trackingNumber as input parameter
      and gets header and package information from the database.
      @param trackingNumber String.
      @return aascTrackingOrderInfo object of AascTrackingOrderInfoDAO class.
     */
    public AascTrackingOrderInfo getTrackingOrderInfo(String trackingNumber, 
                                                            int clientId, 
                                                            int locationId) {

        logger.info("Entered getTrackingOrderInfo()");
        this.trackingNumber = trackingNumber;
//        logger.info("tracking number is :" + trackingNumber);
//        logger.info("clientId is :" + clientId);
//        logger.info("locationId is :" + locationId);

        try {

            DataSource datasource = connectionFactory.createDataSource(); // this method returns the datasources object
            SqlParameterSource inputparams = new MapSqlParameterSource().addValue("ip_tracking_number", trackingNumber)
                                                                        .addValue("ip_client_id", clientId)
                                                                        .addValue("IP_LOCATION_ID", locationId);

            simpleJdbcCall = new SimpleJdbcCall(datasource).withCatalogName("aasc_erp_track_pkg")
                                                           .withProcedureName("get_tracking_details")
                                                           .declareParameters(new SqlOutParameter("OP_STATUS", Types.INTEGER))
                                                           .declareParameters(new SqlOutParameter("OP_ERROR_STATUS", Types.VARCHAR))
                                                           .declareParameters(new SqlOutParameter("aasc_get_order_details", OracleTypes.CURSOR))
                                                           .declareParameters(new SqlOutParameter("aasc_get_pkg_details", OracleTypes.CURSOR));

            Map<String, Object> out = simpleJdbcCall.execute(inputparams);

//            logger.info("After Execute");
//            logger.info("out ::: " + out.toString());
            status = Integer.parseInt(String.valueOf(out.get("OP_STATUS")));
            ArrayList ordersList = (ArrayList)out.get("OP_ORDER_DETAILS");
//            logger.info("Array List map values ::::::::::::::::" + ordersList.toString());
            Iterator ordersIterator = ordersList.iterator();

//            logger.info("ordersList size : " + ordersList.size());

            ArrayList pkgList = (ArrayList)out.get("OP_PKG_DETAILS");
//            logger.info("Array List map values ::::::::::::::::" + pkgList.toString());
            Iterator pkgsIterator = pkgList.iterator();

//            logger.info("pkgList size : " + pkgList.size());

            if (status == 0) // /status == 0 for success
            {
                AascShipmentHeaderInfo headerBean = getHeaderBean(ordersIterator); // calling getHeaderInfo() to get header information               
                LinkedList packageList = getPackageBean(pkgsIterator); // calling getPackageInfo() to catch the Linkedlist containing list of packages

                aascTrackingOrderInfo.setReturnStatus(status); // setting the status
                aascTrackingOrderInfo.setHeaderInfo(headerBean); // setting the HeaderInformation object
                aascTrackingOrderInfo.setPackageInfo(packageList); // setting the PackageInformation LinkedList object

            } else // if status is not equal to 0 setting to null
            {
                aascTrackingOrderInfo.setReturnStatus(status);
                aascTrackingOrderInfo.setHeaderInfo(null);
                aascTrackingOrderInfo.setPackageInfo(null);
            }
        }

        catch (Exception e)

        {
            logger.severe("Got exception in closing database call" + e.getMessage());
            e.printStackTrace();              


        }

        logger.info("Exit from getTrackingOrderInfo()");
        return aascTrackingOrderInfo;
    }


    /**
      Method getHeaderBean() gets all the header information from headerResultSet
      and sets to setXxx() methods of AascHeaderInfo class.
      @return aascHeaderInfo object of AascHeaderInfo class.
     */
    AascShipmentHeaderInfo getHeaderBean(Iterator ordersIterator) {
        logger.info("Entered getHeaderBean()");
        try {
            HashMap<String, ?> resulthm = null;
            while (ordersIterator.hasNext()) {
                resulthm = (HashMap<String, ?>)ordersIterator.next();
            
                aascHeaderInfo.setOrderNumber(nullStrToSpc(String.valueOf(resulthm.get("ORDERNUMBER"))));
                aascHeaderInfo.setCustomerName(nullStrToSpc(String.valueOf(resulthm.get("CUSTOMER_NAME"))));
                aascHeaderInfo.setShipToLocationName(nullStrToSpc(String.valueOf(resulthm.get("SHIP_TO_LOCATION_NAME"))));
                aascHeaderInfo.setShipToAddrLine1(nullStrToSpc(String.valueOf(resulthm.get("SHIP_TO_ADDRESS1"))));  // for bug # 3838
                aascHeaderInfo.setShipToAddrLine2(nullStrToSpc(String.valueOf(resulthm.get("SHIP_TO_ADDRESS2"))));
                aascHeaderInfo.setShipToAddressCity(nullStrToSpc(String.valueOf(resulthm.get("SHIP_TO_CITY"))));
                aascHeaderInfo.setShipToAddressState(nullStrToSpc(String.valueOf(resulthm.get("SHIP_TO_STATE"))));
                aascHeaderInfo.setShipToPostalCode(nullStrToSpc(String.valueOf(resulthm.get("SHIP_TO_POSTAL_CODE"))));
                aascHeaderInfo.setShipToCountry(nullStrToSpc(String.valueOf(resulthm.get("SHIP_TO_COUNTRY_CODE")))); 
                aascHeaderInfo.setWayBill(nullStrToSpc(String.valueOf(resulthm.get("WAYBILL_NUMBER"))));
                Timestamp shipmentTimestamp = Timestamp.valueOf(String.valueOf(resulthm.get("SHIPMENTDATE"))) ;
                Date shipmentDate = new Date(shipmentTimestamp.getTime()); 
                aascHeaderInfo.setShipmentDate(shipmentDate);
                aascHeaderInfo.setShipmentCost(((BigDecimal)resulthm.get("SHIPMENTCOST")).doubleValue());
                aascHeaderInfo.setCarrierName(nullStrToSpc(String.valueOf(resulthm.get("SHIPMENTCARRIER"))));
                aascHeaderInfo.setShipMethodMeaning(nullStrToSpc(String.valueOf(resulthm.get("SHIPPINGMETHOD"))));
                
            }
            logger.info("Values are set successfully to aascHeaderInfo bean");
        } catch (Exception e) {
            logger.severe("Exception::"+e.getMessage());
        }
        logger.info("Exit from getHeaderBean()");
        return aascHeaderInfo;
    }

    /**
      Method getPackageBean() gets all the package information from 
      packageResultSet and sets to setXxx() of AascPackageInfo class.
      @return packageLinkedList object of type LinkedList.
     */
    LinkedList getPackageBean(Iterator pkgsIterator) {
        logger.info("Entered getPackageBean()");
        try {
            packageLinkedList = new LinkedList();
            HashMap<String, ?> resulthm = null;
            while (pkgsIterator.hasNext()) 
            {
                resulthm = (HashMap<String, ?>)pkgsIterator.next();
            
                AascShipmentPackageInfo aascPackageInfo = new AascShipmentPackageInfo();

                aascPackageInfo.setLineNo(nullStrToSpc(String.valueOf(resulthm.get("PACKAGEID"))));
                aascPackageInfo.setUom(nullStrToSpc(String.valueOf(resulthm.get("UOM"))));
                aascPackageInfo.setWeight(Float.valueOf(String.valueOf(resulthm.get("weight"))));
                aascPackageInfo.setTrackingNumber(nullStrToSpc(String.valueOf(resulthm.get("TRACKING_NUMBER"))));
                aascPackageInfo.setStampsTaxId(nullStrToSpc(String.valueOf(resulthm.get("STAMPS_TAXID"))));
                
                packageLinkedList.add(aascPackageInfo);
            }
            logger.info("Values are set successfully to aascPackageInfo bean");
        } catch (Exception e) {
            logger.severe("Exception::"+e.getMessage());
        }
        logger.info("Exit from getPackageBean()");
        return packageLinkedList;
    }

    /**
      Method getOrderNames() passes orderNumber as input parameter and gets
      list of deliveryNames from the database.
      @param orderNumber int.
      @return aascTrackingOrderInfo object of AascTrackingOrderInfoDAO class.
     
     */
    public AascTrackingOrderInfo getOrderNames(String orderNumber, 
                                                  int clientId, 
                                                  int locationId) {


        logger.info("Entered getTrackingNames()");
        this.orderNumber = orderNumber;

        try {

            DataSource datasource = connectionFactory.createDataSource(); // this method returns the datasources object


            SqlParameterSource inputparams = new MapSqlParameterSource().addValue("ip_order_number", orderNumber)
                                                                        .addValue("ip_client_id",clientId)
                                                                        .addValue("ip_location_id", locationId);

            simpleJdbcCall = new SimpleJdbcCall(datasource).withCatalogName("aasc_erp_track_pkg")
                                                           .withProcedureName("get_order_list")
                                                           .declareParameters(new SqlOutParameter("OP_STATUS", Types.INTEGER))
                                                           .declareParameters(new SqlOutParameter("OP_ERROR_STATUS", Types.VARCHAR))
                                                           .declareParameters(new SqlOutParameter("aasc_order_list", OracleTypes.CURSOR));

            Map<String, Object> out = simpleJdbcCall.execute(inputparams);

//            logger.info("After Execute");
//            logger.info("out ::: " + out.toString());
            status = Integer.parseInt(String.valueOf(out.get("OP_STATUS")));
//            String error_status = String.valueOf(out.get("OP_ERROR_STATUS"));
            ArrayList str = (ArrayList)out.get("OP_ORDERS");
//            logger.info("Array List map values ::::::::::::::::" + str.toString());
            Iterator it = str.iterator();

//            logger.info("str size : " + str.size());

            HashMap<String, ?> resulthm = null;
            
            status = Integer.parseInt(String.valueOf(out.get("OP_STATUS")));
            if(status == 0)
            {
              AascShipmentHeaderInfo aascHeaderInfo1 = null ;
              orderLinkedList = new LinkedList();
              while (it.hasNext()) {
                resulthm = (HashMap<String, ?>)it.next();
                
                aascHeaderInfo1 = new AascShipmentHeaderInfo();

                aascHeaderInfo1.setOrderNumber(nullStrToSpc(String.valueOf(resulthm.get("ORDER_NUMBER"))));

                orderLinkedList.add(aascHeaderInfo1);
              }
              aascTrackingOrderInfo.setReturnStatus(status);
              aascTrackingOrderInfo.setOrderList(orderLinkedList);
            }else // if status is not equal to 0 setting to null
            {
                aascTrackingOrderInfo.setReturnStatus(1);
                aascTrackingOrderInfo.setOrderList(null);
            }
            
        } catch (Exception e)

        {
            logger.severe("Got exception in closing database call" +e.getMessage());
            e.printStackTrace();              

        }

        logger.info("Exit from getOrderNames()");
        return aascTrackingOrderInfo;
    }

    /**
      Method getDeliveryBean() gets list of delivery Names
      and sets to setDeliveryName() of AascHeaderInfo class.
      @return deliveryLinkedList object of type LinkedList.
     */
    LinkedList getOrderBean() {
        logger.info("Entered getDeliveryBean()");
        try {
            orderLinkedList = new LinkedList();
            while (orderResultSet.next()) {
                AascShipmentHeaderInfo aascHeaderInfo1 = new AascShipmentHeaderInfo();

                aascHeaderInfo1.setOrderNumber(nullStrToSpc(orderResultSet.getString(1)));

                orderLinkedList.add(aascHeaderInfo1);
            }
        } catch (Exception e) {
            logger.severe("Exception::"+e.getMessage());
        }
        logger.info("Exit from getOrderBean()");
        return orderLinkedList;
    } // end of getDeliveryBean() method
    
 
}// end of AascOracleTrackingOrderInfoDAO class
