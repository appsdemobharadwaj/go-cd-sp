/*
  * @(#)TrackingInformationAction.java        13/01/2006
  * Copyright (c) 2005-2006 Apps Associates Pvt. Ltd.
  * All rights reserved.
*/

package com.aasc.erp.action;

import com.aasc.erp.bean.AascShipMethodInfo;
import com.aasc.erp.bean.AascProfileOptionsBean;
import com.aasc.erp.bean.AascTrackingOrderInfo;
import com.aasc.erp.carrier.AascFedexTrackRequest;
import com.aasc.erp.carrier.AascFedexTrackingInfo;
import com.aasc.erp.carrier.AascTrackingInfo;
import com.aasc.erp.carrier.AascTrackingRequest;
import com.aasc.erp.model.AascDAOFactory;
import com.aasc.erp.model.AascDBAccess;
import com.aasc.erp.model.AascTrackingOrderInfoDAO;
import com.aasc.erp.util.AascLogger;

import com.opensymphony.xwork2.ActionSupport;

import java.util.LinkedList;
import java.util.ListIterator;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.ServletResponseAware;

import com.aasc.erp.bean.AascShipmentHeaderInfo;
import com.aasc.erp.carrier.AascDHLTrackRequest;
import com.aasc.erp.carrier.AascDHLTrackingInfo;
import com.aasc.erp.delegate.TrackingInformationDelegate;

import java.net.URLDecoder;


/**
   TrackingInformationAction class extends Action class
   This class takes values from Jsp and displays the information.
*@author Eshwari
*@version 1.0
*@since
   28-Nov-2014   Eshwari M            Merged Sunanda's code for SC Lite
   17-Dec-2014   Eshwari M            Modifeid code after testing Tracking with shipping data and aligned the code
   29-Dec-2014   Pradeep Y            Fixed all issues in tracking page for all roles.
   16-Jan-2015   Y Pradeep            Modified code to remove unused variables and commented as suggested in Code Review document and ran self audit. Also added TrackingInformationDelegate delegate class.
   19-Jan-2015   Y Pradeep            Changed code for getting Order number from 'inputNumberText' parameter instead of 'inputNumberList' parameter. For bug #2563.
   20-Jan-2015   Y Pradeep            Modified auther and version, also removed commented code.
   09-Mar-2015   Y Pradeep            Modified sessionList order of initializing clientId, locationId to load profile options details while navigating to other pages.
   15-Mar-2015   Eshwari M            Modified code to make tracking information workable for tracking numbers also.
   15-Mar-2015   Y pradeep            Modified code to handle null pointer exception on actiontype.
   17-Mar-2014   Eshwari M            Modified code to get label path that is placed in session at the time of user login and removed Profile option object
   27/05/2015    Y Pradeep            Modified code to display and allow Order Numbers with special characters(Encode and Decode).
   17/06/2015    Suman G             Added code to fix #2986
   14/08/2015    Y Pradeep            Modified code to fix bug #3381. 
   08/02/2016    G S Shekar           Added code for DHL Tracking
*/

public class TrackingInformationAction extends ActionSupport implements ServletRequestAware, 
                                                           ServletResponseAware {
    private String actionType = ""; // gets the type of action 
    private String wayBill = ""; // number generated by connectship server for ups and manually entered for other deliveries to identify them uniquely
    private String trackingNumber = ""; // sequence number for UPS Delivery generated by connectship
    private String inputType = ""; // holds type selected from list in jsp(TrackingNumber,DeliveryName,OrderNumber)
    private String inputNumber = ""; // holds number entered in jsp
    private String inputNumberList = ""; // holds deliveryNames 
    private String shippingMethod = ""; // method for shipping 
    private LinkedList orderList = null; // holds list of deliveryNames
    private static Logger logger = AascLogger.getLogger("TrackingInformationAction");
    private int carrierCode = 0; // gets the carrierCode for ShipMethodMeaning
    private int returnStatus = 1; // gets the status from the data base

    AascTrackingInfo aascTrackingInfo = new AascTrackingInfo(); // creating object AascTrackingInfo class
    AascTrackingRequest aascTrackingRequest = new AascTrackingRequest(); // creating object of AascTrackingRequest class
    AascFedexTrackRequest aascFedexTrackRequest = new AascFedexTrackRequest(); // creating object
    AascFedexTrackingInfo aascFedexTrackingInfo = null; // holds the object of AascFedexTrackingInfo class
    AascDHLTrackingInfo aascDHLTrackingInfo = null;
    AascDHLTrackRequest aascDHLTrackRequest = new AascDHLTrackRequest();
    AascDAOFactory aascDAOFactory = AascDAOFactory.getAascDAOFactory(1);
    AascTrackingOrderInfoDAO aascTrackingOrderInfoDAO = aascDAOFactory.getAascTrackingOrderInfoDAO();
    AascShipMethodInfo aascShipMethodInfo = null;
    AascProfileOptionsBean aascProfileOptionsBean = null;

    private String protocol = ""; //protocol used to communicate with connectShip
    private String hostName = ""; //host name of system which receives the request 
    private String prefix = ""; //page which receives processes request
    private String userName = ""; //username to obtain authorised access to connectShip
    private String password = ""; 
    private String accessLicenseNumber = "";
    private String shipDate;
    String key = null;
    protected HttpServletRequest request;
    protected HttpServletResponse response;

    public HttpServletRequest getServletRequest() {
        return request;
    }

    public void setServletRequest(HttpServletRequest req) {
        this.request = req;
    }

    public HttpServletResponse getServletResponse() {
        return response;
    }

    public void setServletResponse(HttpServletResponse resp) {
        this.response = resp;
    }


    /**
       execute() method gets inputType and inputNumber from jsp and 
       if inputType = TrackingNumber or DeliveryName or OrderNumber it displays
       header and package information and 
       if inputType = OrderNumber it gets list for multiple deliveryNames and displays 
       the information accordingly to the deliveryName selected. 
       execute() method takes actionType and if actionType = WAYBILL or TRACKING or POD
       it displays the information corresponding to that actionType.
       @return success
       @throws java.io.IOException If an input or output exception occurred.
       @throws javax.servlet.ServletException when a class is not found.
     */
    public String execute() {
        logger.info("Entered execute()");
        try {

            HttpSession session = request.getSession(true); 
            AascTrackingOrderInfo aascTrackingOrderInfo = new AascTrackingOrderInfo();

            if (session.isNew() || !(session.getId().equals(session.getAttribute("SessionId")))) {
                return "sessionerror"; 
            }
            int roleIdSession = ((Integer)session.getAttribute("role_id")).intValue();
            if(roleIdSession != 2 && roleIdSession != 4 && roleIdSession != 5){
             return "sessionerror";
            }

            aascProfileOptionsBean = (AascProfileOptionsBean)session.getAttribute("ProfileOptionsInfo");
            TrackingInformationDelegate trackingInformationDelegate = new TrackingInformationDelegate();
            Integer locationId = null;
            Integer roleIdInt = (Integer)session.getAttribute("role_id");
            int roleId = roleIdInt.intValue();
            int clientId = 0;
            Integer clientIdInt = null;
            String labelsPath = (String)session.getAttribute("cloudLabelPath");
            try {
                locationId = Integer.parseInt(request.getParameter("locationIdHidden"));
            } catch (Exception e) {
                locationId = 0;
            }

            if (roleId == 2) {
                String clientIdIntStr = request.getParameter("clientIdSelect");
                try {
                    clientIdInt = new Integer(clientIdIntStr);
                    clientId = clientIdInt.intValue();
                } catch (Exception e) {
                    clientId = 0;
                }

            } else {
                clientIdInt = (Integer)session.getAttribute("client_id");
                clientId = clientIdInt.intValue();
            }

            if (locationId != 0) {
                request.setAttribute("locationValue", locationId);
                session.setAttribute("locationValue", locationId);
            } else {
                locationId = (Integer)session.getAttribute("location_id");
            }

            if (clientId != 0) {
                session.setAttribute("trackClientId", clientId);
            } else {
                try {
                    clientIdInt = ((Integer)session.getAttribute("trackClientId")).intValue();
                    clientId = clientIdInt.intValue();
                } catch (Exception e) {
                    clientId = 0;
                }
            }

            logger.info("clientId : " + clientId);
            logger.info("locationId : " + locationId);
            LinkedList sessionList = new LinkedList();
            //Modified sessionList order of initializing clientId, locationId. By Y Pradeep
            sessionList.add(locationId);
            sessionList.add(clientIdInt);
            
            if (aascProfileOptionsBean == null) {

                trackingInformationDelegate.getProfileOptionsBean(sessionList, session);
            }
            
            actionType = request.getParameter("mainActionType");
            aascTrackingOrderInfo.setActionType(actionType);
            
            if(actionType == null || actionType == "")
                actionType = request.getParameter("actionType");
            
            logger.info("ActionType : " + actionType);    

            inputType = request.getParameter("InputTypeSelect");
            logger.info("inputType : " + inputType);

            if (inputType == null) {
                inputType = "";
                returnStatus = (Integer)session.getAttribute("returnStatusTmp");
            }
            request.setAttribute("InputTypeSelect", inputType); 
            if(!"".equalsIgnoreCase(request.getParameter("inputNumberText")) && request.getParameter("inputNumberText") != null && !(request.getParameter("inputNumberText")).startsWith("SC")){
                inputNumber = URLDecoder.decode(request.getParameter("orderNameEncode"),"UTF-8");
                inputNumberList = URLDecoder.decode(request.getParameter("orderNameEncode"),"UTF-8");// Modified by Y Pradeep for bug #2563
            }
            else {
                inputNumber = request.getParameter("inputNumberText");
                inputNumberList = request.getParameter("inputNumberText");  // Modified by Y Pradeep for bug #2563
            }
            logger.info("inputNumber = "+inputNumber);
            logger.info("inputNumberList = "+inputNumberList);
            if (inputNumber == null) {
                inputNumber = "";
            }
            
            shipDate = request.getParameter("ShipmentTrackDate");
            if (shipDate == null) {
                shipDate = "";

            }

            request.setAttribute("inputNumberText", inputNumber); 
            request.setAttribute("trackDate", shipDate);

            aascShipMethodInfo = trackingInformationDelegate.getShipMethodInfo(sessionList);


            if (inputType.equalsIgnoreCase("TrackingNumber")) {
                
                aascTrackingOrderInfo = 
                                        trackingInformationDelegate.getTrackingOrderInfo(inputNumber, clientId, locationId.intValue()); // calling getTrackingDeliveryInfo() if inputType=TrackingNumber

                returnStatus = aascTrackingOrderInfo.getReturnStatus();
                logger.info("orderNumber in tracking page : " + aascTrackingOrderInfo.getHeaderInfo().getOrderNumber());
                logger.info("returnStatus when inputType = TrackingNumber :" + returnStatus);
            }
            else if (inputType.equalsIgnoreCase("OrderNumber")) {
                
                if (inputNumberList == null || inputNumberList.equals("")) {
                    aascTrackingOrderInfo = trackingInformationDelegate.getOrderNames(inputNumber, clientId, locationId.intValue());
                    returnStatus = aascTrackingOrderInfo.getReturnStatus();
                    orderList = aascTrackingOrderInfo.getOrderList(); // getting orderNames into LinkedList

                    if (orderList != null) {

                        ListIterator orderIterator = orderList.listIterator();

                        while (orderIterator.hasNext()) {
                            AascShipmentHeaderInfo aascHeaderInfo = (AascShipmentHeaderInfo)orderIterator.next();
                            inputNumberList = aascHeaderInfo.getOrderNumber(); 

                        }
                        if (orderList.size() == 1) {
                        
                            aascTrackingOrderInfo = trackingInformationDelegate.getOrderInfo(inputNumberList, clientId, locationId.intValue());
                            returnStatus  = aascTrackingOrderInfo.getReturnStatus();
                        
                        } else {
                        
                            aascTrackingOrderInfo.setHeaderInfo(null);
                            aascTrackingOrderInfo.setPackageInfo(null);
                            returnStatus = 1;

                        }
                    } 
                    else {
                        aascTrackingOrderInfo.setHeaderInfo(null);
                        aascTrackingOrderInfo.setPackageInfo(null);
                    }
                } 
                else {
                    if (!"".equalsIgnoreCase(actionType) && actionType != null) {
                    
                        request.setAttribute("inputNumberText", inputNumberList);
                    
                    }
                    
                    aascTrackingOrderInfo = trackingInformationDelegate.getOrderInfo(inputNumberList, clientId, locationId.intValue());
                    returnStatus = aascTrackingOrderInfo.getReturnStatus();
                    logger.info("returnStatus::::"+returnStatus);
                    
                }

            }
            
            if (inputType != "") {
                session.setAttribute("TrackingInfo", aascTrackingOrderInfo);
            }
            session.setAttribute("returnStatusTmp", returnStatus);
            if (returnStatus == 0) {
                try {
                    shippingMethod = request.getParameter("shipMethod");
                    
                    if (shippingMethod == null) {
                        shippingMethod = "";
                    }
                    if (actionType == null) {
                        actionType = "";
                    }

                    if (shippingMethod != null && !shippingMethod.equals("")) {

                        carrierCode = aascShipMethodInfo.getCarrierCodeFromShipMethod(shippingMethod);
                    }
                } catch (Exception e) {
                    logger.severe("Exception::"+e.getMessage());
                    shippingMethod = "";
                    carrierCode = 0;
                }
                if ((shippingMethod.equals("")) || (shippingMethod == null) || (carrierCode == 0)) {
                logger.info("Inside if shipmethod is null");
                    if (actionType.equals("WAYBILL") || actionType.equals("TRACKING") || actionType.equals("POD")) {
                        return "error"; 

                    }
                } else {
                logger.info("In else before carrier code 100");
                    if (carrierCode == 100) {
                        int carrierId = aascShipMethodInfo.getCarrierId(shippingMethod);

                        aascTrackingOrderInfo = (AascTrackingOrderInfo)session.getAttribute("TrackingInfo");
                        
                        protocol = nullStringToSpace(aascShipMethodInfo.getProtocol(carrierId));
                        hostName = nullStringToSpace(aascShipMethodInfo.getCarrierServerIPAddress(carrierId));
                        prefix = nullStringToSpace(aascShipMethodInfo.getCarrierPrefix(carrierId));
                        userName = nullStringToSpace(aascShipMethodInfo.getCarrierUserName(carrierId));
                        password = nullStringToSpace(aascShipMethodInfo.getCarrierPassword(carrierId));
                        accessLicenseNumber = nullStringToSpace(aascShipMethodInfo.getAccessLicenseNumberFromCarrierId(carrierId));

                        /**** Eshwari added For Demo which has to be removed  ***/
                        
                        protocol= "https";
                        hostName="onlinetools.ups.com";
                        prefix="ups.app/xml";
                        userName="AppsAssociates";
                        password="apps1234";
                        accessLicenseNumber="1C51073BF4FB4158";

                        /**** Eshwari ended For Demo which has to be removed  ***/
                        
                        logger.info("\n protocol: " + protocol + "\n hostName:" + hostName + "\n prefix:" + prefix + "\n userName:" + userName + "\n password:" + password + 
                                    "\naccessLicenseNumber:" + accessLicenseNumber);
                                    
                        aascTrackingOrderInfo.setUserName(userName);
                        aascTrackingOrderInfo.setPassword(password);
                        aascTrackingOrderInfo.setPrefix(prefix);
                        aascTrackingOrderInfo.setHostName(hostName);
                        aascTrackingOrderInfo.setProtocol(protocol);
                        aascTrackingOrderInfo.setService("Track");

                        aascTrackingOrderInfo.setAccessLicenseNumber(accessLicenseNumber);

                        if (actionType.equals("WAYBILL")) {

                            wayBill = request.getParameter("wayBillButton"); // getting waybill number from jsp
                            logger.info("wayBill for UPS:" + wayBill);

                            if (wayBill != null) {
                                // creating track request and retrieves parsed xml response placed in bean
                                aascTrackingInfo = aascTrackingRequest.createRequest("WAYBILL", 
                                                                          wayBill, 
                                                                          aascTrackingOrderInfo, 
                                                                          labelsPath); 
                                session.setAttribute("TrackingInformation", aascTrackingInfo);
                                //logger.info("Returning back");
                                return "tracking"; // forwarding to aascTrackPage.jsp
                            }
                            else {
                                logger.severe("wayBill is null");
                            }
                        }
                        else if (actionType.equals("TRACKING")) {

                            trackingNumber = request.getParameter("trackingNumber"); // getting tracking number from jsp
                            if (trackingNumber != null) {
                                // creating track request and retrieves parsed xml response placed in bean
                                aascTrackingInfo = aascTrackingRequest.createRequest("TRACKING", 
                                                                          trackingNumber, 
                                                                          aascTrackingOrderInfo, 
                                                                          labelsPath);
                                session.setAttribute("TrackingInformation", aascTrackingInfo);
                                return "tracking"; // forwarding to aascTrackPage.jsp
                            }
                            else {
                                logger.severe("Tracking Number is null");
                            }
                        }
                        else {
                            if (actionType.equals("POD")) {
                                wayBill = request.getParameter("wayBillButton"); // added getting waybill number from jsp
                                logger.info("wayBill in POD :" + wayBill);
                                logger.info("labelsPath : "+labelsPath);
                                // creating POd request and retrieves parsed xml response placed in bean
                                aascTrackingInfo = aascTrackingRequest.createRequest("POD", 
                                                                          wayBill, 
                                                                          aascTrackingOrderInfo, 
                                                                          labelsPath); //aascProfileOptionsBean);
                                session.setAttribute("TrackingInformation", aascTrackingInfo);
                                return "tracking"; // forwarding to aascTrackPage.jsp

                            }
                        }
                    }
                    else if (carrierCode == 110 || carrierCode == 111) {

                        // checking for shipping method starts with fe or fdx
                        aascTrackingOrderInfo = (AascTrackingOrderInfo)session.getAttribute("TrackingInfo");
                        // Commented below 2 lines to fix bug #3381.
//                        String orderNumber = request.getParameter("inputNumberText");   // Modified by Y Pradeep for bug #2563
//                        aascTrackingOrderInfo.getHeaderInfo().setOrderNumber(orderNumber);
                        aascTrackingOrderInfo.setActionType(actionType);
                        
                        int carrierId = aascShipMethodInfo.getCarrierId(shippingMethod);

                        String carrierMode = aascShipMethodInfo.getCarrierMode(carrierId);
                        
                        String fedExKey = "";
                        String fedExPassword = "";

                        try {
                            fedExKey = nullStringToSpace(aascShipMethodInfo.getCarrierUserName(carrierId));
                            fedExPassword = nullStringToSpace(aascShipMethodInfo.getCarrierPassword(carrierId));

                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                        String cloudLabelPath = "";
                        /*if (roleId == 2) {
                            cloudLabelPath = new AascDBAccess().getMessage("ShipConsoleUserCloudLabelPath");
                            logger.info("Cloud label path  " + cloudLabelPath);
                        } else {
                            cloudLabelPath = (String)session.getAttribute("cloudLabelPath");
                        }*/
                        cloudLabelPath = (String)session.getAttribute("cloudLabelPath");
                        
                        if (actionType.equals("WAYBILL")) {
                            wayBill = request.getParameter("wayBillButton"); // getting wayBillNumber from jsp
                            logger.info("wayBill " + wayBill);
                            logger.info("Cloud label path  " + cloudLabelPath);
                            if (wayBill != null) {
                                aascTrackingOrderInfo.getHeaderInfo().setWayBill(wayBill);
                                // creating track request and retrieves parsed xml response placed in bean
                                aascFedexTrackingInfo = aascFedexTrackRequest.processRequest(aascTrackingOrderInfo, 
                                                                             aascShipMethodInfo, 
                                                                             aascProfileOptionsBean, 
                                                                             carrierMode, 
                                                                             fedExKey, 
                                                                             fedExPassword, 
                                                                             cloudLabelPath);

                                session.setAttribute("TrackingInformation", aascFedexTrackingInfo);
                                return "fedexTracking"; // forwarding to aascFedexTrackPage.jsp
                            }
                            else {
                                logger.severe("wayBill is null");
                            }
                        }
                        else if (actionType.equals("TRACKING")) {

                            trackingNumber = request.getParameter("trackingNumber"); // getting trackingNumber from jsp
                            if (trackingNumber != null) {
                                aascTrackingOrderInfo.getHeaderInfo().setWayBill(trackingNumber); // added
                                //creating track request and retrieves parsed  xml response placed in bean
                                aascFedexTrackingInfo = aascFedexTrackRequest.processRequest(aascTrackingOrderInfo, 
                                                                             aascShipMethodInfo, 
                                                                             aascProfileOptionsBean, 
                                                                             carrierMode, 
                                                                             fedExKey, 
                                                                             fedExPassword, 
                                                                             cloudLabelPath);
                                session.setAttribute("TrackingInformation", aascFedexTrackingInfo);
                                return "fedexTracking"; // forwarding to aascFedexTrackPage.jsp
                            }
                            else {
                                logger.severe("Tracking Number is null");
                            }
                        }
                        else {
                            if (actionType.equals("POD")) {
                                wayBill = request.getParameter("wayBillButton"); // getting wayBillNumber from jsp
                                aascTrackingOrderInfo.getHeaderInfo().setWayBill(wayBill); // added
                                // creating POd request and retrieves parsed xml response placed in bean
                                aascFedexTrackingInfo = aascFedexTrackRequest.processRequest(aascTrackingOrderInfo, 
                                                                             aascShipMethodInfo, 
                                                                             aascProfileOptionsBean, 
                                                                             carrierMode, 
                                                                             fedExKey, 
                                                                             fedExPassword, 
                                                                             cloudLabelPath);
                                session.setAttribute("TrackingInformation", aascFedexTrackingInfo);
                                request.setAttribute("carrierMode", carrierMode);
                                return "fedexTracking";

                            }
                        } // end of else
                    } // end of else
                    //Below code was added for DHL Tracking
                    else if(carrierCode == 114){
                        aascTrackingOrderInfo = (AascTrackingOrderInfo)session.getAttribute("TrackingInfo");
                        aascTrackingOrderInfo.setActionType(actionType);
                        int carrierId = aascShipMethodInfo.getCarrierId(shippingMethod);
                        String carrierMode = aascShipMethodInfo.getCarrierMode(carrierId);
                        String cloudLabelPath = "E:/TestLabels/";
//                        cloudLabelPath = (String)session.getAttribute("cloudLabelPath");
                        String userName = "";
                        String password = "";

                        try {
                            userName = nullStringToSpace(aascShipMethodInfo.getCarrierUserName(carrierId));
                            password = nullStringToSpace(aascShipMethodInfo.getCarrierPassword(carrierId));

                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        if (actionType.equals("WAYBILL")) {
                            wayBill = request.getParameter("wayBillButton"); // getting wayBillNumber from jsp
                            logger.info("wayBill " + wayBill);
                            logger.info("Cloud label path  " + cloudLabelPath);
                            if (wayBill != null) {
                                aascTrackingOrderInfo.getHeaderInfo().setWayBill(wayBill);
                                aascDHLTrackingInfo = aascDHLTrackRequest.processRequest(aascTrackingOrderInfo, 
                                                                             aascShipMethodInfo, 
                                                                             aascProfileOptionsBean, 
                                                                             carrierMode, 
                                                                             userName, 
                                                                             password, 
                                                                             cloudLabelPath);

                                session.setAttribute("TrackingInformation", aascDHLTrackingInfo);
                                return "dhlTracking"; 
                            }
                            else {
                                logger.severe("wayBill is null");
                            }
                        }
                        
                 else if (actionType.equals("TRACKING")) {

                    trackingNumber = request.getParameter("trackingNumber"); // getting trackingNumber from jsp
                    if (trackingNumber != null) {
                        aascTrackingOrderInfo.getHeaderInfo().setWayBill(trackingNumber); // added
                        //creating track request and retrieves parsed  xml response placed in bean
                       aascDHLTrackingInfo = aascDHLTrackRequest.processRequest(aascTrackingOrderInfo, 
                                                                             aascShipMethodInfo, 
                                                                             aascProfileOptionsBean, 
                                                                             carrierMode, 
                                                                             userName, 
                                                                             password, 
                                                                             cloudLabelPath);
                                session.setAttribute("TrackingInformation", aascDHLTrackingInfo);
                                return "dhlTracking"; // forwarding to aascDHLTrackPage.jsp
                            }
                            else {
                                logger.severe("Tracking Number is null");
                            }
                        }                        
                    }
                     //DHL Tracking code end
                    else {
                        logger.info("For Non Ups and Non Fedex");
                        if ((carrierCode != 100) && (carrierCode != 110) && (carrierCode != 111)) {
                            if (actionType.equals("WAYBILL") || actionType.equals("TRACKING") || actionType.equals("POD")) {
                                return "ltlTracking";
                            }
                        }
                    }
                } // end of else
            }
            else if (returnStatus == -1013) {
                logger.severe("inside Else if block return status is :" + returnStatus);
                key = "aasc20001";
                request.setAttribute("key", key);
            }

            else {
                logger.severe("in else block return status is :" + returnStatus);
            }
        } // end of try block 
        catch (Exception e) {
            logger.severe("Exception::"+e.getMessage());
        }
        return "success";
    } // end of execute() method  

    /**
       nullStringToSpace() method is used when the string is null it replaces with space.
       @param object of type Object
       @return String that is "".
     */
    public String nullStringToSpace(Object object) {
        String spcStr = "";

        if (object == null) {
            return spcStr;
        } else {
            return object.toString();
        }
    } // end of nullStringToSpace() method


} // end of TrackingInformationAction class
                                                           
