// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.aasc.erp.carrier.stampsws.proxy.runtime;

import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.encoding.literal.DetailFragmentDeserializer;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.soap.SOAPEnvelopeConstants;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.streaming.*;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import oracle.j2ee.ws.common.util.xml.UUID;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.AttachmentPart;

public class Capabilities_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final QName ns1_CanPrintShipping_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanPrintShipping");
    private static final QName ns2_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer myns2__boolean__boolean_Boolean_Serializer;
    private static final QName ns1_CanUseCostCodes_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanUseCostCodes");
    private static final QName ns1_CanUseHiddenPostage_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanUseHiddenPostage");
    private static final QName ns1_CanPurchaseSDCInsurance_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanPurchaseSDCInsurance");
    private static final QName ns1_CanPrintMemoOnShippingLabel_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanPrintMemoOnShippingLabel");
    private static final QName ns1_CanPrintInternational_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanPrintInternational");
    private static final QName ns1_CanPurchasePostage_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanPurchasePostage");
    private static final QName ns1_CanEditCostCodes_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanEditCostCodes");
    private static final QName ns1_MustUseCostCodes_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "MustUseCostCodes");
    private static final QName ns1_CanViewOnlineReports_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CanViewOnlineReports");
    private static final QName ns1_PerPrintLimit_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "PerPrintLimit");
    private static final QName ns2_decimal_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DECIMAL;
    private CombinedSerializer myns2_decimal__java_math_BigDecimal_Decimal_Serializer;
    
    public Capabilities_LiteralSerializer(QName type) {
        this(type,  false);
    }
    
    public Capabilities_LiteralSerializer(QName type, boolean encodeType) {
        super(type, true, encodeType);
        setSOAPVersion(SOAPVersion.SOAP_11);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        myns2__boolean__boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", boolean.class, ns2_boolean_TYPE_QNAME);
        myns2_decimal__java_math_BigDecimal_Decimal_Serializer = (CombinedSerializer)registry.getSerializer("", java.math.BigDecimal.class, ns2_decimal_TYPE_QNAME);
    }
    
    public java.lang.Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.Capabilities instance = new com.aasc.erp.carrier.stampsws.proxy.Capabilities();
        java.lang.Object member=null;
        QName elementName;
        List values;
        java.lang.Object value;
        
        reader.nextElementContent();
        java.util.HashSet requiredElements = new java.util.HashSet();
        requiredElements.add("CanPrintShipping");
        requiredElements.add("CanUseCostCodes");
        requiredElements.add("CanUseHiddenPostage");
        requiredElements.add("CanPurchaseSDCInsurance");
        requiredElements.add("CanPrintMemoOnShippingLabel");
        requiredElements.add("CanPrintInternational");
        requiredElements.add("CanPurchasePostage");
        requiredElements.add("CanEditCostCodes");
        requiredElements.add("MustUseCostCodes");
        requiredElements.add("CanViewOnlineReports");
        requiredElements.add("PerPrintLimit");
        for (int memberIndex = 0; memberIndex <11; memberIndex++) {
            elementName = reader.getName();
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanPrintShipping_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanPrintShipping_QNAME, reader, context);
                requiredElements.remove("CanPrintShipping");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanPrintShipping(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanUseCostCodes_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanUseCostCodes_QNAME, reader, context);
                requiredElements.remove("CanUseCostCodes");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanUseCostCodes(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanUseHiddenPostage_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanUseHiddenPostage_QNAME, reader, context);
                requiredElements.remove("CanUseHiddenPostage");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanUseHiddenPostage(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanPurchaseSDCInsurance_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanPurchaseSDCInsurance_QNAME, reader, context);
                requiredElements.remove("CanPurchaseSDCInsurance");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanPurchaseSDCInsurance(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanPrintMemoOnShippingLabel_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanPrintMemoOnShippingLabel_QNAME, reader, context);
                requiredElements.remove("CanPrintMemoOnShippingLabel");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanPrintMemoOnShippingLabel(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanPrintInternational_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanPrintInternational_QNAME, reader, context);
                requiredElements.remove("CanPrintInternational");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanPrintInternational(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanPurchasePostage_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanPurchasePostage_QNAME, reader, context);
                requiredElements.remove("CanPurchasePostage");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanPurchasePostage(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanEditCostCodes_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanEditCostCodes_QNAME, reader, context);
                requiredElements.remove("CanEditCostCodes");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanEditCostCodes(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_MustUseCostCodes_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_MustUseCostCodes_QNAME, reader, context);
                requiredElements.remove("MustUseCostCodes");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setMustUseCostCodes(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CanViewOnlineReports_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CanViewOnlineReports_QNAME, reader, context);
                requiredElements.remove("CanViewOnlineReports");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCanViewOnlineReports(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_PerPrintLimit_QNAME))) {
                myns2_decimal__java_math_BigDecimal_Decimal_Serializer.setNullable( false );
                member = myns2_decimal__java_math_BigDecimal_Decimal_Serializer.deserialize(ns1_PerPrintLimit_QNAME, reader, context);
                requiredElements.remove("PerPrintLimit");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setPerPrintLimit((java.math.BigDecimal)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
        }
        if (!requiredElements.isEmpty()) {
            throw new DeserializationException( "literal.expectedElementName" , requiredElements.iterator().next().toString(), DeserializationException.FAULT_CODE_CLIENT );
        }
        
        if( reader.getState() != XMLReader.END)
        {
            reader.skipElement();
        }
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object)instance;
    }
    
    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.Capabilities instance = (com.aasc.erp.carrier.stampsws.proxy.Capabilities)obj;
        
    }
    public void doSerializeAnyAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.Capabilities instance = (com.aasc.erp.carrier.stampsws.proxy.Capabilities)obj;
        
    }
    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.Capabilities instance = (com.aasc.erp.carrier.stampsws.proxy.Capabilities)obj;
        
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanPrintShipping()), ns1_CanPrintShipping_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanUseCostCodes()), ns1_CanUseCostCodes_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanUseHiddenPostage()), ns1_CanUseHiddenPostage_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanPurchaseSDCInsurance()), ns1_CanPurchaseSDCInsurance_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanPrintMemoOnShippingLabel()), ns1_CanPrintMemoOnShippingLabel_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanPrintInternational()), ns1_CanPrintInternational_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanPurchasePostage()), ns1_CanPurchasePostage_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanEditCostCodes()), ns1_CanEditCostCodes_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isMustUseCostCodes()), ns1_MustUseCostCodes_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCanViewOnlineReports()), ns1_CanViewOnlineReports_QNAME, null, writer, context);
        myns2_decimal__java_math_BigDecimal_Decimal_Serializer.setNullable( false );
        myns2_decimal__java_math_BigDecimal_Decimal_Serializer.serialize(instance.getPerPrintLimit(), ns1_PerPrintLimit_QNAME, null, writer, context);
    }
}
