// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.aasc.erp.carrier.stampsws.proxy.runtime;

import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.encoding.literal.DetailFragmentDeserializer;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.soap.SOAPEnvelopeConstants;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.streaming.*;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import oracle.j2ee.ws.common.util.xml.UUID;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.AttachmentPart;

public class NetStampsLayout_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final QName ns1_Name_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "Name");
    private static final QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer myns2_string__java_lang_String_String_Serializer;
    private static final QName ns1_Description_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "Description");
    private static final QName ns1_SerialNumberPattern_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "SerialNumberPattern");
    private static final QName ns1_NumRows_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "NumRows");
    private static final QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer myns2__int__int_Int_Serializer;
    private static final QName ns1_NumColumns_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "NumColumns");
    private static final QName ns1_BackgroundImageURL_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "BackgroundImageURL");
    private static final QName ns1_BackgroundImageWidthPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "BackgroundImageWidthPx");
    private static final QName ns1_BackgroundImageHeightPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "BackgroundImageHeightPx");
    private static final QName ns1_EmptyNetStampImageURL_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "EmptyNetStampImageURL");
    private static final QName ns1_UsedNetStampImageURL_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "UsedNetStampImageURL");
    private static final QName ns1_PrintedNetStampImageURL_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "PrintedNetStampImageURL");
    private static final QName ns1_NetStampImageWidthPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "NetStampImageWidthPx");
    private static final QName ns1_NetStampImageHeightPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "NetStampImageHeightPx");
    private static final QName ns1_Row1StartsAtPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "Row1StartsAtPx");
    private static final QName ns1_Column1StartsAtPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "Column1StartsAtPx");
    private static final QName ns1_HorizontalSpaceBetweenNetStampsPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "HorizontalSpaceBetweenNetStampsPx");
    private static final QName ns1_VerticalSpaceBetweenNetStampsPx_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "VerticalSpaceBetweenNetStampsPx");
    
    public NetStampsLayout_LiteralSerializer(QName type) {
        this(type,  false);
    }
    
    public NetStampsLayout_LiteralSerializer(QName type, boolean encodeType) {
        super(type, true, encodeType);
        setSOAPVersion(SOAPVersion.SOAP_11);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        myns2__int__int_Int_Serializer = (CombinedSerializer)registry.getSerializer("", int.class, ns2_int_TYPE_QNAME);
    }
    
    public java.lang.Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout instance = new com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout();
        java.lang.Object member=null;
        QName elementName;
        List values;
        java.lang.Object value;
        
        reader.nextElementContent();
        java.util.HashSet requiredElements = new java.util.HashSet();
        requiredElements.add("Name");
        requiredElements.add("Description");
        requiredElements.add("SerialNumberPattern");
        requiredElements.add("NumRows");
        requiredElements.add("NumColumns");
        requiredElements.add("BackgroundImageURL");
        requiredElements.add("BackgroundImageWidthPx");
        requiredElements.add("BackgroundImageHeightPx");
        requiredElements.add("EmptyNetStampImageURL");
        requiredElements.add("UsedNetStampImageURL");
        requiredElements.add("PrintedNetStampImageURL");
        requiredElements.add("NetStampImageWidthPx");
        requiredElements.add("NetStampImageHeightPx");
        requiredElements.add("Row1StartsAtPx");
        requiredElements.add("Column1StartsAtPx");
        requiredElements.add("HorizontalSpaceBetweenNetStampsPx");
        requiredElements.add("VerticalSpaceBetweenNetStampsPx");
        for (int memberIndex = 0; memberIndex <17; memberIndex++) {
            elementName = reader.getName();
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_Name_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Name_QNAME, reader, context);
                requiredElements.remove("Name");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setName((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_Description_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Description_QNAME, reader, context);
                requiredElements.remove("Description");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setDescription((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_SerialNumberPattern_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SerialNumberPattern_QNAME, reader, context);
                requiredElements.remove("SerialNumberPattern");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setSerialNumberPattern((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_NumRows_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_NumRows_QNAME, reader, context);
                requiredElements.remove("NumRows");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setNumRows(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_NumColumns_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_NumColumns_QNAME, reader, context);
                requiredElements.remove("NumColumns");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setNumColumns(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_BackgroundImageURL_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_BackgroundImageURL_QNAME, reader, context);
                requiredElements.remove("BackgroundImageURL");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setBackgroundImageURL((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_BackgroundImageWidthPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_BackgroundImageWidthPx_QNAME, reader, context);
                requiredElements.remove("BackgroundImageWidthPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setBackgroundImageWidthPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_BackgroundImageHeightPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_BackgroundImageHeightPx_QNAME, reader, context);
                requiredElements.remove("BackgroundImageHeightPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setBackgroundImageHeightPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_EmptyNetStampImageURL_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_EmptyNetStampImageURL_QNAME, reader, context);
                requiredElements.remove("EmptyNetStampImageURL");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setEmptyNetStampImageURL((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_UsedNetStampImageURL_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_UsedNetStampImageURL_QNAME, reader, context);
                requiredElements.remove("UsedNetStampImageURL");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setUsedNetStampImageURL((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_PrintedNetStampImageURL_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_PrintedNetStampImageURL_QNAME, reader, context);
                requiredElements.remove("PrintedNetStampImageURL");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setPrintedNetStampImageURL((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_NetStampImageWidthPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_NetStampImageWidthPx_QNAME, reader, context);
                requiredElements.remove("NetStampImageWidthPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setNetStampImageWidthPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_NetStampImageHeightPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_NetStampImageHeightPx_QNAME, reader, context);
                requiredElements.remove("NetStampImageHeightPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setNetStampImageHeightPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_Row1StartsAtPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_Row1StartsAtPx_QNAME, reader, context);
                requiredElements.remove("Row1StartsAtPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setRow1StartsAtPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_Column1StartsAtPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_Column1StartsAtPx_QNAME, reader, context);
                requiredElements.remove("Column1StartsAtPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setColumn1StartsAtPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_HorizontalSpaceBetweenNetStampsPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_HorizontalSpaceBetweenNetStampsPx_QNAME, reader, context);
                requiredElements.remove("HorizontalSpaceBetweenNetStampsPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setHorizontalSpaceBetweenNetStampsPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_VerticalSpaceBetweenNetStampsPx_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_VerticalSpaceBetweenNetStampsPx_QNAME, reader, context);
                requiredElements.remove("VerticalSpaceBetweenNetStampsPx");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setVerticalSpaceBetweenNetStampsPx(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
        }
        if (!requiredElements.isEmpty()) {
            throw new DeserializationException( "literal.expectedElementName" , requiredElements.iterator().next().toString(), DeserializationException.FAULT_CODE_CLIENT );
        }
        
        if( reader.getState() != XMLReader.END)
        {
            reader.skipElement();
        }
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object)instance;
    }
    
    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout instance = (com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout)obj;
        
    }
    public void doSerializeAnyAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout instance = (com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout)obj;
        
    }
    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout instance = (com.aasc.erp.carrier.stampsws.proxy.NetStampsLayout)obj;
        
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getName(), ns1_Name_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getDescription(), ns1_Description_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getSerialNumberPattern(), ns1_SerialNumberPattern_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getNumRows()), ns1_NumRows_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getNumColumns()), ns1_NumColumns_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getBackgroundImageURL(), ns1_BackgroundImageURL_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getBackgroundImageWidthPx()), ns1_BackgroundImageWidthPx_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getBackgroundImageHeightPx()), ns1_BackgroundImageHeightPx_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getEmptyNetStampImageURL(), ns1_EmptyNetStampImageURL_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getUsedNetStampImageURL(), ns1_UsedNetStampImageURL_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getPrintedNetStampImageURL(), ns1_PrintedNetStampImageURL_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getNetStampImageWidthPx()), ns1_NetStampImageWidthPx_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getNetStampImageHeightPx()), ns1_NetStampImageHeightPx_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getRow1StartsAtPx()), ns1_Row1StartsAtPx_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getColumn1StartsAtPx()), ns1_Column1StartsAtPx_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getHorizontalSpaceBetweenNetStampsPx()), ns1_HorizontalSpaceBetweenNetStampsPx_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getVerticalSpaceBetweenNetStampsPx()), ns1_VerticalSpaceBetweenNetStampsPx_QNAME, null, writer, context);
    }
}
