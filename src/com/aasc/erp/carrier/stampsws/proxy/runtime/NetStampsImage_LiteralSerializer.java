// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.aasc.erp.carrier.stampsws.proxy.runtime;

import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.encoding.literal.DetailFragmentDeserializer;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.soap.SOAPEnvelopeConstants;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.streaming.*;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import oracle.j2ee.ws.common.util.xml.UUID;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.AttachmentPart;

public class NetStampsImage_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final QName ns1_ImageName_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ImageName");
    private static final QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer myns2_string__java_lang_String_String_Serializer;
    private static final QName ns1_ImageID_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ImageID");
    private static final QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer myns2__int__int_Int_Serializer;
    private static final QName ns1_ImageCategory_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ImageCategory");
    private static final QName ns1_ImageDescription_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ImageDescription");
    private static final QName ns1_ImageUrl_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ImageUrl");
    private static final QName ns1_ImageIndex_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ImageIndex");
    private static final QName ns1_ImageType_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ImageType");
    private static final QName ns1_NetStampsImageType_TYPE_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "NetStampsImageType");
    private CombinedSerializer myns1_NetStampsImageType__NetStampsImageType_LiteralSerializer;
    private static final QName ns1_PreviewOnly_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "PreviewOnly");
    private static final QName ns2_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer myns2__boolean__boolean_Boolean_Serializer;
    private static final QName ns1_PlansUpgradeToPrintImage_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "PlansUpgradeToPrintImage");
    private static final QName ns1_ArrayOfPlan_TYPE_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ArrayOfPlan");
    private CombinedSerializer myns1_ArrayOfPlan__ArrayOfPlan_LiteralSerializer;
    
    public NetStampsImage_LiteralSerializer(QName type) {
        this(type,  false);
    }
    
    public NetStampsImage_LiteralSerializer(QName type, boolean encodeType) {
        super(type, true, encodeType);
        setSOAPVersion(SOAPVersion.SOAP_11);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        myns2__int__int_Int_Serializer = (CombinedSerializer)registry.getSerializer("", int.class, ns2_int_TYPE_QNAME);
        myns1_NetStampsImageType__NetStampsImageType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.aasc.erp.carrier.stampsws.proxy.NetStampsImageType.class, ns1_NetStampsImageType_TYPE_QNAME);
        myns2__boolean__boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", boolean.class, ns2_boolean_TYPE_QNAME);
        myns1_ArrayOfPlan__ArrayOfPlan_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.aasc.erp.carrier.stampsws.proxy.ArrayOfPlan.class, ns1_ArrayOfPlan_TYPE_QNAME);
    }
    
    public java.lang.Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsImage instance = new com.aasc.erp.carrier.stampsws.proxy.NetStampsImage();
        java.lang.Object member=null;
        QName elementName;
        List values;
        java.lang.Object value;
        
        reader.nextElementContent();
        java.util.HashSet requiredElements = new java.util.HashSet();
        requiredElements.add("ImageName");
        requiredElements.add("ImageID");
        requiredElements.add("ImageCategory");
        requiredElements.add("ImageDescription");
        requiredElements.add("ImageUrl");
        requiredElements.add("ImageIndex");
        requiredElements.add("ImageType");
        requiredElements.add("PreviewOnly");
        for (int memberIndex = 0; memberIndex <9; memberIndex++) {
            elementName = reader.getName();
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ImageName_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_ImageName_QNAME, reader, context);
                requiredElements.remove("ImageName");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setImageName((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ImageID_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_ImageID_QNAME, reader, context);
                requiredElements.remove("ImageID");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setImageID(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ImageCategory_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_ImageCategory_QNAME, reader, context);
                requiredElements.remove("ImageCategory");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setImageCategory((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ImageDescription_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_ImageDescription_QNAME, reader, context);
                requiredElements.remove("ImageDescription");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setImageDescription((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ImageUrl_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_ImageUrl_QNAME, reader, context);
                requiredElements.remove("ImageUrl");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setImageUrl((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ImageIndex_QNAME))) {
                myns2__int__int_Int_Serializer.setNullable( false );
                member = myns2__int__int_Int_Serializer.deserialize(ns1_ImageIndex_QNAME, reader, context);
                requiredElements.remove("ImageIndex");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setImageIndex(((Integer)member).intValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ImageType_QNAME))) {
                myns1_NetStampsImageType__NetStampsImageType_LiteralSerializer.setNullable( false );
                member = myns1_NetStampsImageType__NetStampsImageType_LiteralSerializer.deserialize(ns1_ImageType_QNAME, reader, context);
                requiredElements.remove("ImageType");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setImageType((com.aasc.erp.carrier.stampsws.proxy.NetStampsImageType)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_PreviewOnly_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_PreviewOnly_QNAME, reader, context);
                requiredElements.remove("PreviewOnly");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setPreviewOnly(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_PlansUpgradeToPrintImage_QNAME))) {
                myns1_ArrayOfPlan__ArrayOfPlan_LiteralSerializer.setNullable( false );
                member = myns1_ArrayOfPlan__ArrayOfPlan_LiteralSerializer.deserialize(ns1_PlansUpgradeToPrintImage_QNAME, reader, context);
                requiredElements.remove("PlansUpgradeToPrintImage");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setPlansUpgradeToPrintImage((member == null)? null : ((com.aasc.erp.carrier.stampsws.proxy.ArrayOfPlan)member).toArray());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
        }
        if (!requiredElements.isEmpty()) {
            throw new DeserializationException( "literal.expectedElementName" , requiredElements.iterator().next().toString(), DeserializationException.FAULT_CODE_CLIENT );
        }
        
        if( reader.getState() != XMLReader.END)
        {
            reader.skipElement();
        }
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object)instance;
    }
    
    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsImage instance = (com.aasc.erp.carrier.stampsws.proxy.NetStampsImage)obj;
        
    }
    public void doSerializeAnyAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsImage instance = (com.aasc.erp.carrier.stampsws.proxy.NetStampsImage)obj;
        
    }
    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.NetStampsImage instance = (com.aasc.erp.carrier.stampsws.proxy.NetStampsImage)obj;
        
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getImageName(), ns1_ImageName_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getImageID()), ns1_ImageID_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getImageCategory(), ns1_ImageCategory_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getImageDescription(), ns1_ImageDescription_QNAME, null, writer, context);
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getImageUrl(), ns1_ImageUrl_QNAME, null, writer, context);
        myns2__int__int_Int_Serializer.setNullable( false );
        myns2__int__int_Int_Serializer.serialize(new Integer(instance.getImageIndex()), ns1_ImageIndex_QNAME, null, writer, context);
        myns1_NetStampsImageType__NetStampsImageType_LiteralSerializer.setNullable( false );
        myns1_NetStampsImageType__NetStampsImageType_LiteralSerializer.serialize(instance.getImageType(), ns1_ImageType_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isPreviewOnly()), ns1_PreviewOnly_QNAME, null, writer, context);
        if (instance.getPlansUpgradeToPrintImage() != null) {
            myns1_ArrayOfPlan__ArrayOfPlan_LiteralSerializer.setNullable( false );
            com.aasc.erp.carrier.stampsws.proxy.ArrayOfPlan instanceGetPlansUpgradeToPrintImage_arrayWrapper = (instance.getPlansUpgradeToPrintImage() == null) ? null : new com.aasc.erp.carrier.stampsws.proxy.ArrayOfPlan(instance.getPlansUpgradeToPrintImage());
            myns1_ArrayOfPlan__ArrayOfPlan_LiteralSerializer.serialize(instanceGetPlansUpgradeToPrintImage_arrayWrapper, ns1_PlansUpgradeToPrintImage_QNAME, null, writer, context);
        }
    }
}
