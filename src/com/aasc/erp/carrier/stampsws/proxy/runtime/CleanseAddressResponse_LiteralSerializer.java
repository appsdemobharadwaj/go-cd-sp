// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.aasc.erp.carrier.stampsws.proxy.runtime;

import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.encoding.literal.DetailFragmentDeserializer;
import oracle.j2ee.ws.common.encoding.simpletype.*;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.soap.SOAPEnvelopeConstants;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.streaming.*;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import oracle.j2ee.ws.common.util.xml.UUID;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.AttachmentPart;

public class CleanseAddressResponse_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final QName ns1_Authenticator_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "Authenticator");
    private static final QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer myns2_string__java_lang_String_String_Serializer;
    private static final QName ns1_Address_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "Address");
    private static final QName ns1_Address_TYPE_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "Address");
    private CombinedSerializer myns1_Address__Address_LiteralSerializer;
    private static final QName ns1_AddressMatch_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "AddressMatch");
    private static final QName ns2_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer myns2__boolean__boolean_Boolean_Serializer;
    private static final QName ns1_CityStateZipOK_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CityStateZipOK");
    private static final QName ns1_ResidentialDeliveryIndicator_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ResidentialDeliveryIndicator");
    private static final QName ns1_ResidentialDeliveryIndicatorType_TYPE_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ResidentialDeliveryIndicatorType");
    private CombinedSerializer myns1_ResidentialDeliveryIndicatorType__ResidentialDeliveryIndicatorType_LiteralSerializer;
    private static final QName ns1_IsPOBox_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "IsPOBox");
    private CombinedSerializer myns2__boolean__java_lang_Boolean_Boolean_Serializer;
    private static final QName ns1_CandidateAddresses_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "CandidateAddresses");
    private static final QName ns1_ArrayOfAddress_TYPE_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "ArrayOfAddress");
    private CombinedSerializer myns1_ArrayOfAddress__ArrayOfAddress_LiteralSerializer;
    private static final QName ns1_StatusCodes_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "StatusCodes");
    private static final QName ns1_StatusCodes_TYPE_QNAME = new QName("http://stamps.com/xml/namespace/2014/07/swsim/swsimv37", "StatusCodes");
    private CombinedSerializer myns1_StatusCodes__StatusCodes_LiteralSerializer;
    
    public CleanseAddressResponse_LiteralSerializer(QName type) {
        this(type,  false);
    }
    
    public CleanseAddressResponse_LiteralSerializer(QName type, boolean encodeType) {
        super(type, true, encodeType);
        setSOAPVersion(SOAPVersion.SOAP_11);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        myns1_Address__Address_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.aasc.erp.carrier.stampsws.proxy.Address.class, ns1_Address_TYPE_QNAME);
        myns2__boolean__boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", boolean.class, ns2_boolean_TYPE_QNAME);
        myns1_ResidentialDeliveryIndicatorType__ResidentialDeliveryIndicatorType_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.aasc.erp.carrier.stampsws.proxy.ResidentialDeliveryIndicatorType.class, ns1_ResidentialDeliveryIndicatorType_TYPE_QNAME);
        myns2__boolean__java_lang_Boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.Boolean.class, ns2_boolean_TYPE_QNAME);
        myns1_ArrayOfAddress__ArrayOfAddress_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.aasc.erp.carrier.stampsws.proxy.ArrayOfAddress.class, ns1_ArrayOfAddress_TYPE_QNAME);
        myns1_StatusCodes__StatusCodes_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.aasc.erp.carrier.stampsws.proxy.StatusCodes.class, ns1_StatusCodes_TYPE_QNAME);
    }
    
    public java.lang.Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse instance = new com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse();
        java.lang.Object member=null;
        QName elementName;
        List values;
        java.lang.Object value;
        
        reader.nextElementContent();
        java.util.HashSet requiredElements = new java.util.HashSet();
        requiredElements.add("Authenticator");
        requiredElements.add("Address");
        requiredElements.add("AddressMatch");
        requiredElements.add("CityStateZipOK");
        requiredElements.add("ResidentialDeliveryIndicator");
        requiredElements.add("CandidateAddresses");
        requiredElements.add("StatusCodes");
        for (int memberIndex = 0; memberIndex <8; memberIndex++) {
            elementName = reader.getName();
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_Authenticator_QNAME))) {
                myns2_string__java_lang_String_String_Serializer.setNullable( false );
                member = myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Authenticator_QNAME, reader, context);
                requiredElements.remove("Authenticator");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setAuthenticator((java.lang.String)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_Address_QNAME))) {
                myns1_Address__Address_LiteralSerializer.setNullable( false );
                member = myns1_Address__Address_LiteralSerializer.deserialize(ns1_Address_QNAME, reader, context);
                requiredElements.remove("Address");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setAddress((com.aasc.erp.carrier.stampsws.proxy.Address)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_AddressMatch_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_AddressMatch_QNAME, reader, context);
                requiredElements.remove("AddressMatch");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setAddressMatch(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CityStateZipOK_QNAME))) {
                myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
                member = myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_CityStateZipOK_QNAME, reader, context);
                requiredElements.remove("CityStateZipOK");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCityStateZipOK(((Boolean)member).booleanValue());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_ResidentialDeliveryIndicator_QNAME))) {
                myns1_ResidentialDeliveryIndicatorType__ResidentialDeliveryIndicatorType_LiteralSerializer.setNullable( false );
                member = myns1_ResidentialDeliveryIndicatorType__ResidentialDeliveryIndicatorType_LiteralSerializer.deserialize(ns1_ResidentialDeliveryIndicator_QNAME, reader, context);
                requiredElements.remove("ResidentialDeliveryIndicator");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setResidentialDeliveryIndicator((com.aasc.erp.carrier.stampsws.proxy.ResidentialDeliveryIndicatorType)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_IsPOBox_QNAME))) {
                myns2__boolean__java_lang_Boolean_Boolean_Serializer.setNullable( true );
                member = myns2__boolean__java_lang_Boolean_Boolean_Serializer.deserialize(ns1_IsPOBox_QNAME, reader, context);
                requiredElements.remove("IsPOBox");
                instance.setIsPOBox((java.lang.Boolean)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_CandidateAddresses_QNAME))) {
                myns1_ArrayOfAddress__ArrayOfAddress_LiteralSerializer.setNullable( false );
                member = myns1_ArrayOfAddress__ArrayOfAddress_LiteralSerializer.deserialize(ns1_CandidateAddresses_QNAME, reader, context);
                requiredElements.remove("CandidateAddresses");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setCandidateAddresses((member == null)? null : ((com.aasc.erp.carrier.stampsws.proxy.ArrayOfAddress)member).toArray());
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
            if ((reader.getState() == XMLReader.START) && (matchQName(elementName, ns1_StatusCodes_QNAME))) {
                myns1_StatusCodes__StatusCodes_LiteralSerializer.setNullable( false );
                member = myns1_StatusCodes__StatusCodes_LiteralSerializer.deserialize(ns1_StatusCodes_QNAME, reader, context);
                requiredElements.remove("StatusCodes");
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull",DeserializationException.FAULT_CODE_CLIENT);
                }
                instance.setStatusCodes((com.aasc.erp.carrier.stampsws.proxy.StatusCodes)member);
                context.setXmlFragmentWrapperName( null );
                reader.nextElementContent();
            }
        }
        if (!requiredElements.isEmpty()) {
            throw new DeserializationException( "literal.expectedElementName" , requiredElements.iterator().next().toString(), DeserializationException.FAULT_CODE_CLIENT );
        }
        
        if( reader.getState() != XMLReader.END)
        {
            reader.skipElement();
        }
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object)instance;
    }
    
    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse instance = (com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse)obj;
        
    }
    public void doSerializeAnyAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse instance = (com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse)obj;
        
    }
    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse instance = (com.aasc.erp.carrier.stampsws.proxy.CleanseAddressResponse)obj;
        
        myns2_string__java_lang_String_String_Serializer.setNullable( false );
        myns2_string__java_lang_String_String_Serializer.serialize(instance.getAuthenticator(), ns1_Authenticator_QNAME, null, writer, context);
        myns1_Address__Address_LiteralSerializer.setNullable( false );
        myns1_Address__Address_LiteralSerializer.serialize(instance.getAddress(), ns1_Address_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isAddressMatch()), ns1_AddressMatch_QNAME, null, writer, context);
        myns2__boolean__boolean_Boolean_Serializer.setNullable( false );
        myns2__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isCityStateZipOK()), ns1_CityStateZipOK_QNAME, null, writer, context);
        myns1_ResidentialDeliveryIndicatorType__ResidentialDeliveryIndicatorType_LiteralSerializer.setNullable( false );
        myns1_ResidentialDeliveryIndicatorType__ResidentialDeliveryIndicatorType_LiteralSerializer.serialize(instance.getResidentialDeliveryIndicator(), ns1_ResidentialDeliveryIndicator_QNAME, null, writer, context);
        myns2__boolean__java_lang_Boolean_Boolean_Serializer.setNullable( true );
        myns2__boolean__java_lang_Boolean_Boolean_Serializer.serialize(instance.getIsPOBox(), ns1_IsPOBox_QNAME, null, writer, context);
        myns1_ArrayOfAddress__ArrayOfAddress_LiteralSerializer.setNullable( false );
        com.aasc.erp.carrier.stampsws.proxy.ArrayOfAddress instanceGetCandidateAddresses_arrayWrapper = (instance.getCandidateAddresses() == null) ? null : new com.aasc.erp.carrier.stampsws.proxy.ArrayOfAddress(instance.getCandidateAddresses());
        myns1_ArrayOfAddress__ArrayOfAddress_LiteralSerializer.serialize(instanceGetCandidateAddresses_arrayWrapper, ns1_CandidateAddresses_QNAME, null, writer, context);
        myns1_StatusCodes__StatusCodes_LiteralSerializer.setNullable( false );
        myns1_StatusCodes__StatusCodes_LiteralSerializer.serialize(instance.getStatusCodes(), ns1_StatusCodes_QNAME, null, writer, context);
    }
}
