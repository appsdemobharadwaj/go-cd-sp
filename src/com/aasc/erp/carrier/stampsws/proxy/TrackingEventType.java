// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.aasc.erp.carrier.stampsws.proxy;


public class TrackingEventType implements java.io.Serializable {
    private java.lang.String value;
    private static final String _NoneString = "None";
    private static final String _ManifestAcknowledgementString = "ManifestAcknowledgement";
    private static final String _ElectronicNotificationString = "ElectronicNotification";
    private static final String _DeliveredString = "Delivered";
    private static final String _AttemptedNoticeLeftString = "AttemptedNoticeLeft";
    private static final String _AcceptOrPickupString = "AcceptOrPickup";
    private static final String _RefusedString = "Refused";
    private static final String _UndeliverableString = "Undeliverable";
    private static final String _ForwardedString = "Forwarded";
    private static final String _ArrivalAtUnitString = "ArrivalAtUnit";
    private static final String _MissentString = "Missent";
    private static final String _ReturnToSenderString = "ReturnToSender";
    private static final String _EnrouteString = "Enroute";
    private static final String _DeadLetterString = "DeadLetter";
    private static final String _ArrivalAtPickupPointString = "ArrivalAtPickupPoint";
    private static final String _NoSuchNumberString = "NoSuchNumber";
    private static final String _InsufficientAddressString = "InsufficientAddress";
    private static final String _MovedNoForwardingString = "MovedNoForwarding";
    private static final String _ForwardingExpiredString = "ForwardingExpired";
    private static final String _AddresseeUnknownString = "AddresseeUnknown";
    private static final String _VacantString = "Vacant";
    private static final String _UnclaimedString = "Unclaimed";
    private static final String _DeceasedString = "Deceased";
    private static final String _ReturnedOtherReasonString = "ReturnedOtherReason";
    private static final String _PickedUpByShippingPartnerString = "PickedUpByShippingPartner";
    private static final String _ArrivedAtShippingPartnerString = "ArrivedAtShippingPartner";
    private static final String _DepartedFromShippingPartnerString = "DepartedFromShippingPartner";
    private static final String _UnrecognizedEventString = "UnrecognizedEvent";
    private static final String _ErrorDateNotAvailableString = "ErrorDateNotAvailable";
    
    public static final java.lang.String _None = new java.lang.String(_NoneString);
    public static final java.lang.String _ManifestAcknowledgement = new java.lang.String(_ManifestAcknowledgementString);
    public static final java.lang.String _ElectronicNotification = new java.lang.String(_ElectronicNotificationString);
    public static final java.lang.String _Delivered = new java.lang.String(_DeliveredString);
    public static final java.lang.String _AttemptedNoticeLeft = new java.lang.String(_AttemptedNoticeLeftString);
    public static final java.lang.String _AcceptOrPickup = new java.lang.String(_AcceptOrPickupString);
    public static final java.lang.String _Refused = new java.lang.String(_RefusedString);
    public static final java.lang.String _Undeliverable = new java.lang.String(_UndeliverableString);
    public static final java.lang.String _Forwarded = new java.lang.String(_ForwardedString);
    public static final java.lang.String _ArrivalAtUnit = new java.lang.String(_ArrivalAtUnitString);
    public static final java.lang.String _Missent = new java.lang.String(_MissentString);
    public static final java.lang.String _ReturnToSender = new java.lang.String(_ReturnToSenderString);
    public static final java.lang.String _Enroute = new java.lang.String(_EnrouteString);
    public static final java.lang.String _DeadLetter = new java.lang.String(_DeadLetterString);
    public static final java.lang.String _ArrivalAtPickupPoint = new java.lang.String(_ArrivalAtPickupPointString);
    public static final java.lang.String _NoSuchNumber = new java.lang.String(_NoSuchNumberString);
    public static final java.lang.String _InsufficientAddress = new java.lang.String(_InsufficientAddressString);
    public static final java.lang.String _MovedNoForwarding = new java.lang.String(_MovedNoForwardingString);
    public static final java.lang.String _ForwardingExpired = new java.lang.String(_ForwardingExpiredString);
    public static final java.lang.String _AddresseeUnknown = new java.lang.String(_AddresseeUnknownString);
    public static final java.lang.String _Vacant = new java.lang.String(_VacantString);
    public static final java.lang.String _Unclaimed = new java.lang.String(_UnclaimedString);
    public static final java.lang.String _Deceased = new java.lang.String(_DeceasedString);
    public static final java.lang.String _ReturnedOtherReason = new java.lang.String(_ReturnedOtherReasonString);
    public static final java.lang.String _PickedUpByShippingPartner = new java.lang.String(_PickedUpByShippingPartnerString);
    public static final java.lang.String _ArrivedAtShippingPartner = new java.lang.String(_ArrivedAtShippingPartnerString);
    public static final java.lang.String _DepartedFromShippingPartner = new java.lang.String(_DepartedFromShippingPartnerString);
    public static final java.lang.String _UnrecognizedEvent = new java.lang.String(_UnrecognizedEventString);
    public static final java.lang.String _ErrorDateNotAvailable = new java.lang.String(_ErrorDateNotAvailableString);
    
    public static final TrackingEventType None = new TrackingEventType(_None);
    public static final TrackingEventType ManifestAcknowledgement = new TrackingEventType(_ManifestAcknowledgement);
    public static final TrackingEventType ElectronicNotification = new TrackingEventType(_ElectronicNotification);
    public static final TrackingEventType Delivered = new TrackingEventType(_Delivered);
    public static final TrackingEventType AttemptedNoticeLeft = new TrackingEventType(_AttemptedNoticeLeft);
    public static final TrackingEventType AcceptOrPickup = new TrackingEventType(_AcceptOrPickup);
    public static final TrackingEventType Refused = new TrackingEventType(_Refused);
    public static final TrackingEventType Undeliverable = new TrackingEventType(_Undeliverable);
    public static final TrackingEventType Forwarded = new TrackingEventType(_Forwarded);
    public static final TrackingEventType ArrivalAtUnit = new TrackingEventType(_ArrivalAtUnit);
    public static final TrackingEventType Missent = new TrackingEventType(_Missent);
    public static final TrackingEventType ReturnToSender = new TrackingEventType(_ReturnToSender);
    public static final TrackingEventType Enroute = new TrackingEventType(_Enroute);
    public static final TrackingEventType DeadLetter = new TrackingEventType(_DeadLetter);
    public static final TrackingEventType ArrivalAtPickupPoint = new TrackingEventType(_ArrivalAtPickupPoint);
    public static final TrackingEventType NoSuchNumber = new TrackingEventType(_NoSuchNumber);
    public static final TrackingEventType InsufficientAddress = new TrackingEventType(_InsufficientAddress);
    public static final TrackingEventType MovedNoForwarding = new TrackingEventType(_MovedNoForwarding);
    public static final TrackingEventType ForwardingExpired = new TrackingEventType(_ForwardingExpired);
    public static final TrackingEventType AddresseeUnknown = new TrackingEventType(_AddresseeUnknown);
    public static final TrackingEventType Vacant = new TrackingEventType(_Vacant);
    public static final TrackingEventType Unclaimed = new TrackingEventType(_Unclaimed);
    public static final TrackingEventType Deceased = new TrackingEventType(_Deceased);
    public static final TrackingEventType ReturnedOtherReason = new TrackingEventType(_ReturnedOtherReason);
    public static final TrackingEventType PickedUpByShippingPartner = new TrackingEventType(_PickedUpByShippingPartner);
    public static final TrackingEventType ArrivedAtShippingPartner = new TrackingEventType(_ArrivedAtShippingPartner);
    public static final TrackingEventType DepartedFromShippingPartner = new TrackingEventType(_DepartedFromShippingPartner);
    public static final TrackingEventType UnrecognizedEvent = new TrackingEventType(_UnrecognizedEvent);
    public static final TrackingEventType ErrorDateNotAvailable = new TrackingEventType(_ErrorDateNotAvailable);
    
    protected TrackingEventType(java.lang.String value) {
        this.value = value;
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static TrackingEventType fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (None.value.equals(value)) {
            return None;
        }if (ManifestAcknowledgement.value.equals(value)) {
            return ManifestAcknowledgement;
        }if (ElectronicNotification.value.equals(value)) {
            return ElectronicNotification;
        }if (Delivered.value.equals(value)) {
            return Delivered;
        }if (AttemptedNoticeLeft.value.equals(value)) {
            return AttemptedNoticeLeft;
        }if (AcceptOrPickup.value.equals(value)) {
            return AcceptOrPickup;
        }if (Refused.value.equals(value)) {
            return Refused;
        }if (Undeliverable.value.equals(value)) {
            return Undeliverable;
        }if (Forwarded.value.equals(value)) {
            return Forwarded;
        }if (ArrivalAtUnit.value.equals(value)) {
            return ArrivalAtUnit;
        }if (Missent.value.equals(value)) {
            return Missent;
        }if (ReturnToSender.value.equals(value)) {
            return ReturnToSender;
        }if (Enroute.value.equals(value)) {
            return Enroute;
        }if (DeadLetter.value.equals(value)) {
            return DeadLetter;
        }if (ArrivalAtPickupPoint.value.equals(value)) {
            return ArrivalAtPickupPoint;
        }if (NoSuchNumber.value.equals(value)) {
            return NoSuchNumber;
        }if (InsufficientAddress.value.equals(value)) {
            return InsufficientAddress;
        }if (MovedNoForwarding.value.equals(value)) {
            return MovedNoForwarding;
        }if (ForwardingExpired.value.equals(value)) {
            return ForwardingExpired;
        }if (AddresseeUnknown.value.equals(value)) {
            return AddresseeUnknown;
        }if (Vacant.value.equals(value)) {
            return Vacant;
        }if (Unclaimed.value.equals(value)) {
            return Unclaimed;
        }if (Deceased.value.equals(value)) {
            return Deceased;
        }if (ReturnedOtherReason.value.equals(value)) {
            return ReturnedOtherReason;
        }if (PickedUpByShippingPartner.value.equals(value)) {
            return PickedUpByShippingPartner;
        }if (ArrivedAtShippingPartner.value.equals(value)) {
            return ArrivedAtShippingPartner;
        }if (DepartedFromShippingPartner.value.equals(value)) {
            return DepartedFromShippingPartner;
        }if (UnrecognizedEvent.value.equals(value)) {
            return UnrecognizedEvent;
        }if (ErrorDateNotAvailable.value.equals(value)) {
            return ErrorDateNotAvailable;
        }
        throw new IllegalArgumentException();
    }
    
    public static TrackingEventType fromString(String value)
        throws java.lang.IllegalStateException {
        if (value.equals(_NoneString)) {
            return None;
        }if (value.equals(_ManifestAcknowledgementString)) {
            return ManifestAcknowledgement;
        }if (value.equals(_ElectronicNotificationString)) {
            return ElectronicNotification;
        }if (value.equals(_DeliveredString)) {
            return Delivered;
        }if (value.equals(_AttemptedNoticeLeftString)) {
            return AttemptedNoticeLeft;
        }if (value.equals(_AcceptOrPickupString)) {
            return AcceptOrPickup;
        }if (value.equals(_RefusedString)) {
            return Refused;
        }if (value.equals(_UndeliverableString)) {
            return Undeliverable;
        }if (value.equals(_ForwardedString)) {
            return Forwarded;
        }if (value.equals(_ArrivalAtUnitString)) {
            return ArrivalAtUnit;
        }if (value.equals(_MissentString)) {
            return Missent;
        }if (value.equals(_ReturnToSenderString)) {
            return ReturnToSender;
        }if (value.equals(_EnrouteString)) {
            return Enroute;
        }if (value.equals(_DeadLetterString)) {
            return DeadLetter;
        }if (value.equals(_ArrivalAtPickupPointString)) {
            return ArrivalAtPickupPoint;
        }if (value.equals(_NoSuchNumberString)) {
            return NoSuchNumber;
        }if (value.equals(_InsufficientAddressString)) {
            return InsufficientAddress;
        }if (value.equals(_MovedNoForwardingString)) {
            return MovedNoForwarding;
        }if (value.equals(_ForwardingExpiredString)) {
            return ForwardingExpired;
        }if (value.equals(_AddresseeUnknownString)) {
            return AddresseeUnknown;
        }if (value.equals(_VacantString)) {
            return Vacant;
        }if (value.equals(_UnclaimedString)) {
            return Unclaimed;
        }if (value.equals(_DeceasedString)) {
            return Deceased;
        }if (value.equals(_ReturnedOtherReasonString)) {
            return ReturnedOtherReason;
        }if (value.equals(_PickedUpByShippingPartnerString)) {
            return PickedUpByShippingPartner;
        }if (value.equals(_ArrivedAtShippingPartnerString)) {
            return ArrivedAtShippingPartner;
        }if (value.equals(_DepartedFromShippingPartnerString)) {
            return DepartedFromShippingPartner;
        }if (value.equals(_UnrecognizedEventString)) {
            return UnrecognizedEvent;
        }if (value.equals(_ErrorDateNotAvailableString)) {
            return ErrorDateNotAvailable;
        }
        throw new IllegalArgumentException();
    }
    
    public String toString() {
        return value.toString();
    }
    
    public boolean equals(java.lang.Object obj) {
        if (!(obj instanceof TrackingEventType)) {
            return false;
        }
        return ((TrackingEventType)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
