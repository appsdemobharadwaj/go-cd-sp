// This source file is generated by Oracle tools and is subject to change
// It is a utility client for invoking the operations of the Web service port.
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.4.0, build 080709.0800.28953)

package com.aasc.erp.carrier.stampsws.proxy;

import oracle.webservices.transport.ClientTransport;
import oracle.webservices.OracleStub;
import javax.xml.rpc.ServiceFactory;
import javax.xml.rpc.Stub;

public class SwsimV37SoapClient {
    private com.aasc.erp.carrier.stampsws.proxy.SwsimV37Soap _port;
    
    public SwsimV37SoapClient() throws Exception {
        ServiceFactory factory = ServiceFactory.newInstance();
        _port = ((com.aasc.erp.carrier.stampsws.proxy.SwsimV37)factory.loadService(com.aasc.erp.carrier.stampsws.proxy.SwsimV37.class)).getSwsimV37Soap();
    }
    
    /**
     * @param args
     */
    public static void main(String[] args) {
        try {
            com.aasc.erp.carrier.stampsws.proxy.SwsimV37SoapClient myPort = new com.aasc.erp.carrier.stampsws.proxy.SwsimV37SoapClient();
            System.out.println("calling " + myPort.getEndpoint());
            // Add your own code here
        
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    /**
     * delegate all operations to the underlying implementation class.
     */
    
    /**
    Generate a SCAN form.

    **/
    public CreateScanFormResponse createScanForm(Credentials credentials, String authenticator, String[] stampsTxIDs, Address fromAddress, ImageType imageType, boolean printInstructions, java.util.Calendar shipDate) throws java.rmi.RemoteException {
        return _port.createScanForm(credentials, authenticator, stampsTxIDs, fromAddress, imageType, printInstructions, shipDate);
    }
    
    /**
    Generate an indicium.

    **/
    public CreateIndiciumResponse createIndicium(String authenticator, Credentials credentials, String integratorTxID, String trackingNumber, RateV14 rate, Address from, Address to, String customerID, CustomsV2 customs, Boolean sampleOnly, ImageType imageType, EltronPrinterDPIType eltronPrinterDPIType, String memo, Integer cost_code_id, Boolean deliveryNotification, ShipmentNotification shipmentNotification, Integer rotationDegrees, Integer horizontalOffset, Integer verticalOffset, Integer printDensity, Boolean printMemo, Boolean printInstructions, Boolean requestPostageHash, NonDeliveryOption nonDeliveryOption, Address redirectTo, String originalPostageHash, Boolean returnImageData, String internalTransactionNumber, PaperSizeV1 paperSize, LabelRecipientInfo emailLabelTo) throws java.rmi.RemoteException {
        return _port.createIndicium(authenticator, credentials, integratorTxID, trackingNumber, rate, from, to, customerID, customs, sampleOnly, imageType, eltronPrinterDPIType, memo, cost_code_id, deliveryNotification, shipmentNotification, rotationDegrees, horizontalOffset, verticalOffset, printDensity, printMemo, printInstructions, requestPostageHash, nonDeliveryOption, redirectTo, originalPostageHash, returnImageData, internalTransactionNumber, paperSize, emailLabelTo);
    }
    
    /**
    Generate an unfunded indicium.

    **/
    public CreateUnfundedIndiciumResponse createUnfundedIndicium(Credentials credentials, String authenticator, String integratorTxID, String trackingNumber, RateV14 rate, Address from, Address to, String customerID, CustomsV2 customs, Boolean sampleOnly, ImageType imageType, EltronPrinterDPIType eltronPrinterDPIType, String memo, Integer cost_code_id, String recipient_email, Boolean deliveryNotification, Boolean shipmentNotificationCC, Boolean shipmentNotificationCCToMain, Boolean shipmentNotificationFromCompany, Boolean shipmentNotificationCompanyInSubject, Integer rotationDegrees) throws java.rmi.RemoteException {
        return _port.createUnfundedIndicium(credentials, authenticator, integratorTxID, trackingNumber, rate, from, to, customerID, customs, sampleOnly, imageType, eltronPrinterDPIType, memo, cost_code_id, recipient_email, deliveryNotification, shipmentNotificationCC, shipmentNotificationCCToMain, shipmentNotificationFromCompany, shipmentNotificationCompanyInSubject, rotationDegrees);
    }
    
    /**
    Generate an envelope indicium.

    **/
    public CreateEnvelopeIndiciumResponse createEnvelopeIndicium(Credentials credentials, String authenticator, String integratorTxID, RateV14 rate, Address from, Address to, String customerID, CreateIndiciumModeV1 mode, ImageType imageType, Integer costCodeId, Boolean hideFIM) throws java.rmi.RemoteException {
        return _port.createEnvelopeIndicium(credentials, authenticator, integratorTxID, rate, from, to, customerID, mode, imageType, costCodeId, hideFIM);
    }
    
    /**
    Generate NetStamps indicia.

    **/
    public CreateNetStampsIndiciaResponse createNetStampsIndicia(String authenticator, Credentials credentials, String integratorTxId, String layout, NetStampV10[] netStamps, Address from, Boolean sampleOnly, ImageType imageType, Integer cost_code_id, Integer imageId, Boolean returnIndiciaData) throws java.rmi.RemoteException {
        return _port.createNetStampsIndicia(authenticator, credentials, integratorTxId, layout, netStamps, from, sampleOnly, imageType, cost_code_id, imageId, returnIndiciaData);
    }
    
    /**
    Generate a mailing label sheet.

    **/
    public CreateMailingLabelIndiciaResponse createMailingLabelIndicia(Credentials credentials, String authenticator, String integratorTxId, String layout, Boolean printAddress, Integer startRow, Integer startColumn, IndiciumInfoV6[] indiciumInfo, CreateIndiciumModeV1 mode, ImageType imageType) throws java.rmi.RemoteException {
        return _port.createMailingLabelIndicia(credentials, authenticator, integratorTxId, layout, printAddress, startRow, startColumn, indiciumInfo, mode, imageType);
    }
    
    /**
    Calculate a rate or a list of rates.

    **/
    public GetRatesResponse getRates(Credentials credentials, String authenticator, RateV14 rate) throws java.rmi.RemoteException {
        return _port.getRates(credentials, authenticator, rate);
    }
    
    /**
    Change Plan.

    **/
    public ChangePlanResponse changePlan(Credentials credentials, String authenticator, Integer planId, String promoCode) throws java.rmi.RemoteException {
        return _port.changePlan(credentials, authenticator, planId, promoCode);
    }
    
    /**
    Get URL for a Stamps.com web page.

    **/
    public GetURLResponse getURL(String authenticator, Credentials credentials, UrlType URLType, String applicationContext) throws java.rmi.RemoteException {
        return _port.getURL(authenticator, credentials, URLType, applicationContext);
    }
    
    /**
    Recover Username.

    **/
    public void recoverUsername(String emailAddress) throws java.rmi.RemoteException {
        _port.recoverUsername(emailAddress);
    }
    
    /**
    Get list of supported countries.

    **/
    public GetSupportedCountriesResponse getSupportedCountries(String authenticator, Credentials credentials) throws java.rmi.RemoteException {
        return _port.getSupportedCountries(authenticator, credentials);
    }
    
    /**
    Change Password.

    **/
    public String changePassword(Credentials credentials, String authenticator, String oldPassword, String newPassword) throws java.rmi.RemoteException {
        return _port.changePassword(credentials, authenticator, oldPassword, newPassword);
    }
    
    /**
    Price Store Orders.

    **/
    public PriceOrderResponse priceOrder(Credentials credentials, String authenticator, Sku[] skus, String promoCode, Address shippingAddress) throws java.rmi.RemoteException {
        return _port.priceOrder(credentials, authenticator, skus, promoCode, shippingAddress);
    }
    
    /**
    Place Store Orders.

    **/
    public PlaceOrderResponse placeOrder(Credentials credentials, String authenticator, Sku[] skus, String promoCode, Address shippingAddress, StoreShippingMethodType storeShippingMethod) throws java.rmi.RemoteException {
        return _port.placeOrder(credentials, authenticator, skus, promoCode, shippingAddress, storeShippingMethod);
    }
    
    /**
    Cleanse an address.

    **/
    public CleanseAddressResponse cleanseAddress(Credentials credentials, String authenticator, Address address) throws java.rmi.RemoteException {
        return _port.cleanseAddress(credentials, authenticator, address);
    }
    
    /**
    Get NetStamps Images.

    **/
    public GetNetStampsImagesResponse getNetStampsImages(String authenticator, Credentials credentials) throws java.rmi.RemoteException {
        return _port.getNetStampsImages(authenticator, credentials);
    }
    
    /**
    Get status of plan change.

    **/
    public GetChangePlanStatusResponse getChangePlanStatus(Credentials credentials, String authenticator, int transactionID) throws java.rmi.RemoteException {
        return _port.getChangePlanStatus(credentials, authenticator, transactionID);
    }
    
    /**
    Purchase additional postage.

    **/
    public PurchasePostageResponse purchasePostage(String authenticator, Credentials credentials, java.math.BigDecimal purchaseAmount, java.math.BigDecimal controlTotal, MachineInfo MI, String integratorTxID) throws java.rmi.RemoteException {
        return _port.purchasePostage(authenticator, credentials, purchaseAmount, controlTotal, MI, integratorTxID);
    }
    
    /**
    Resubmit Purchase.

    **/
    public ResubmitPurchaseResponse resubmitPurchase(String authenticator, Credentials credentials, String resubmitCookie) throws java.rmi.RemoteException {
        return _port.resubmitPurchase(authenticator, credentials, resubmitCookie);
    }
    
    /**
    Request carrier pickup from USPS.

    **/
    public CarrierPickupResponse carrierPickup(Credentials credentials, String authenticator, String firstName, String lastName, String company, String address, String suiteOrApt, String city, String state, String ZIP, String ZIP4, String phoneNumber, String phoneExt, Integer numberOfExpressMailPieces, Integer numberOfPriorityMailPieces, Integer numberOfInternationalPieces, Integer numberOfOtherPieces, int totalWeightOfPackagesLbs, CarrierPickupLocationV1 packageLocation, String specialInstruction) throws java.rmi.RemoteException {
        return _port.carrierPickup(credentials, authenticator, firstName, lastName, company, address, suiteOrApt, city, state, ZIP, ZIP4, phoneNumber, phoneExt, numberOfExpressMailPieces, numberOfPriorityMailPieces, numberOfInternationalPieces, numberOfOtherPieces, totalWeightOfPackagesLbs, packageLocation, specialInstruction);
    }
    
    /**
    Get list of NetStamps layouts.

    **/
    public EnumNetStampsLayoutsResponse enumNetStampsLayouts(Credentials credentials, String authenticator) throws java.rmi.RemoteException {
        return _port.enumNetStampsLayouts(credentials, authenticator);
    }
    
    /**
    Get list of cost codes.

    **/
    public EnumCostCodesResponse enumCostCodes(Credentials credentials, String authenticator) throws java.rmi.RemoteException {
        return _port.enumCostCodes(credentials, authenticator);
    }
    
    /**
    Authenticate with transfer authenticator.

    **/
    public String authenticateWithTransferAuthenticator(String integrationID, String transferAuthenticator) throws java.rmi.RemoteException {
        return _port.authenticateWithTransferAuthenticator(integrationID, transferAuthenticator);
    }
    
    /**
    Cancel a previously issued indicium.

    **/
    public String cancelIndicium(Credentials credentials, String authenticator, String trackingNumber, String stampsTxID) throws java.rmi.RemoteException {
        return _port.cancelIndicium(credentials, authenticator, trackingNumber, stampsTxID);
    }
    
    /**
    Start a password reset by sending a temporary password to the e-mail address on file.

    **/
    public void startPasswordReset(String username, String codeword1, String codeword2, String integrationId) throws java.rmi.RemoteException {
        _port.startPasswordReset(username, codeword1, codeword2, integrationId);
    }
    
    /**
    Finish a password reset, setting the permanent password to a new password.

    **/
    public void finishPasswordReset(String username, String tempPassword, String newPassword, String integrationId) throws java.rmi.RemoteException {
        _port.finishPasswordReset(username, tempPassword, newPassword, integrationId);
    }
    
    /**
    Retrieve codeword questions for user for starting password reset.

    **/
    public GetCodewordQuestionsResponse getCodewordQuestions(String username, String integrationId) throws java.rmi.RemoteException {
        return _port.getCodewordQuestions(username, integrationId);
    }
    
    /**
    Register a new Stamps.com account.

    **/
    public RegisterAccountResponse registerAccount(String integrationID, String userName, String password, CodewordType codeword1Type, String codeword1, CodewordType codeword2Type, String codeword2, Address physicalAddress, Address mailingAddress, MachineInfo machineInfo, String email, AccountType accountType, String promoCode, CreditCard creditCard, AchAccount achAccount) throws java.rmi.RemoteException {
        return _port.registerAccount(integrationID, userName, password, codeword1Type, codeword1, codeword2Type, codeword2, physicalAddress, mailingAddress, machineInfo, email, accountType, promoCode, creditCard, achAccount);
    }
    
    /**
    Void an unfunded indicium.

    **/
    public String voidUnfundedIndicium(String authenticator, Credentials credentials, String stampsTxID) throws java.rmi.RemoteException {
        return _port.voidUnfundedIndicium(authenticator, credentials, stampsTxID);
    }
    
    /**
    Fund an unfunded indicium.

    **/
    public String fundUnfundedIndicium(String authenticator, Credentials credentials, String stampsTxID) throws java.rmi.RemoteException {
        return _port.fundUnfundedIndicium(authenticator, credentials, stampsTxID);
    }
    
    /**
    Initial authentication.

    **/
    public AuthenticateUserResponse authenticateUser(Credentials credentials) throws java.rmi.RemoteException {
        return _port.authenticateUser(credentials);
    }
    
    /**
    Get account information, including postage balance.

    **/
    public GetAccountInfoResponse getAccountInfo(Credentials credentials, String authenticator) throws java.rmi.RemoteException {
        return _port.getAccountInfo(credentials, authenticator);
    }
    
    /**
    Get status of postage purchase.

    **/
    public GetPurchaseStatusResponse getPurchaseStatus(String authenticator, Credentials credentials, int transactionID) throws java.rmi.RemoteException {
        return _port.getPurchaseStatus(authenticator, credentials, transactionID);
    }
    
    /**
    Get tracking events for shipment.

    **/
    public TrackShipmentResponse trackShipment(String authenticator, Credentials credentials, String stampsTxID, String trackingNumber) throws java.rmi.RemoteException {
        return _port.trackShipment(authenticator, credentials, stampsTxID, trackingNumber);
    }
    
    
    /**
     * used to access the JAX-RPC level APIs
     * returns the interface of the port instance
     */
    public com.aasc.erp.carrier.stampsws.proxy.SwsimV37Soap getPort() {
        return _port;
    }
    
    public String getEndpoint() {
        return (String) ((Stub) _port)._getProperty(Stub.ENDPOINT_ADDRESS_PROPERTY);
    }
    
    public void setEndpoint(String endpoint) {
        ((Stub) _port)._setProperty(Stub.ENDPOINT_ADDRESS_PROPERTY, endpoint);
    }
    
    public String getPassword() {
        return (String) ((Stub) _port)._getProperty(Stub.PASSWORD_PROPERTY);
    }
    
    public void setPassword(String password) {
        ((Stub) _port)._setProperty(Stub.PASSWORD_PROPERTY, password);
    }
    
    public String getUsername() {
        return (String) ((Stub) _port)._getProperty(Stub.USERNAME_PROPERTY);
    }
    
    public void setUsername(String username) {
        ((Stub) _port)._setProperty(Stub.USERNAME_PROPERTY, username);
    }
    
    public void setMaintainSession(boolean maintainSession) {
        ((Stub) _port)._setProperty(Stub.SESSION_MAINTAIN_PROPERTY, Boolean.valueOf(maintainSession));
    }
    
    public boolean getMaintainSession() {
        return ((Boolean) ((Stub) _port)._getProperty(Stub.SESSION_MAINTAIN_PROPERTY)).booleanValue();
    }
    
    /**
     * returns the transport context
     */
    public ClientTransport getClientTransport() {
        return ((OracleStub) _port).getClientTransport();
    }
    
}
