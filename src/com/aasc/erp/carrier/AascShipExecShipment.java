package com.aasc.erp.carrier;

/*
 * @(#)AascShipExecShipment.java
 * Copyright (c) 2014-2015 Apps Associates Pvt. Ltd.
 * All rights reserved.
 */

import com.aasc.erp.bean.AascHazmatPackageInfo;
import com.aasc.erp.carrier.AascShipExecShipmentInfo;
import com.aasc.erp.bean.AascIntlCommodityInfo;
import com.aasc.erp.bean.AascIntlHeaderInfo;
//import com.aasc.erp.bean.AascIntlInfo;
//import com.aasc.erp.bean.AascShipMethodInfo;
import com.aasc.erp.bean.AascIntlInfo;
import com.aasc.erp.bean.AascProfileOptionsBean;
import com.aasc.erp.bean.AascShipMethodInfo;
import com.aasc.erp.bean.AascShipmentHeaderInfo;
import com.aasc.erp.bean.AascShipmentOrderInfo;
import com.aasc.erp.bean.AascShipmentPackageInfo;
//import com.aasc.erp.carrier.AascConnectShipConnection;
import com.aasc.erp.carrier.AascXmlTransmitter;
//import com.aasc.erp.carrier.shipexec.proxy.CommodityContent;
//import com.aasc.erp.carrier.shipexec.proxy.HazMatContent;
//import com.aasc.erp.carrier.shipexec.proxy.NameAddress;
//import com.aasc.erp.carrier.shipexec.proxy.Package;
//import com.aasc.erp.carrier.shipexec.proxy.PackageRequest;
//import com.aasc.erp.carrier.shipexec.proxy.PrintRequest;
//import com.aasc.erp.carrier.shipexec.proxy.ShipResponse;
//import com.aasc.erp.carrier.shipexec.proxy.ShipmentRequest;
//import com.aasc.erp.carrier.shipexec.proxy.SoxDictionaryItem;
//import com.aasc.erp.carrier.shipexec.proxy.WcfShipClient;
//import com.aasc.erp.model.aascShipmentOrderInfo;
//import com.aasc.erp.model.AascHazmatPackageInfo;
//import com.aasc.erp.model.AascHeaderInfo;
//import com.aasc.erp.model.AascIntlCommodityInfo;
//import com.aasc.erp.model.AascIntlInfo;
//import com.aasc.erp.model.AascLineInfo;
//import com.aasc.erp.model.AascPackageInfo;
//import com.aasc.erp.model.AascProfileOptionsInfo;
//import com.aasc.erp.model.AascShipMethodInfo;

import com.aasc.erp.util.AascLogger;

import java.beans.PersistenceDelegate;
import java.beans.XMLEncoder;

import java.io.ByteArrayOutputStream;

import java.io.FileOutputStream;
import java.io.OutputStream;

import java.math.BigDecimal;

import java.math.MathContext;

import java.net.HttpURLConnection;

import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.logging.Logger;

import com.aasc.erp.carrier.shipexec.proxy.WcfShipClient;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.CommodityContent;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.HazMatContent;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.Package;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.NameAddress;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.PackageRequest;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.PrintRequest;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.ShipResponse;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.ShipmentRequest;
import com.aasc.erp.carrier.shipexec.proxy.types.psi.wcf.SoxDictionaryItem;


/**
 * AascShipExecShipment Class contains createShipmentRequest()
 * which is used for creating Shipment by a WSDL call using the client generated by using the WSDL file and calling the service ship() 
   to get the shipment response and also the charges,labels in the response.
 * @author 	Gururaj Thirtham
 * @version     7.2.3
 * @since 
 * 05/01/2015 Gururaj Modified code according to code review.
 * 07/04/2015 Gururaj Added code for Hazmat Shipping for ShipExec
 * 15/06/2015 Gururaj Added code to pass ITN number for ShipExec
 * 15/06/2015 Gururaj Added code for LTL integration for ShipExec in ShipConsole
 * 29/07/2015 Gururaj Added code for DHL intergration for ShipExec.
 */
public class AascShipExecShipment {

   // AascAdhocHeaderInfo aascAdhocHeaderInfo = null;//SC_7.0_LB
   // LinkedList adhocPackageList = null;
    AascShipmentHeaderInfo aascHeaderInfo = null;
    LinkedList linkedList = 
        null; // linked list containing delivery or order packages information objects
    ListIterator listIterator = 
        null; // list iterator used to traverse through packages linked list
    AascShipmentPackageInfo aascPackageBean = 
        null; // delivery package information bean
   // AascAdhocPackageInfo aascAdhocPackageInfo = null;//SC_7.0_LB
    String shipmentResponse = 
        ""; // String Containg the shipment response xml file
    String parsedStatus = ""; // indicates the status of parsing
    static Logger logger = AascLogger.getLogger("AascShipExecShipment");
    //need to add code
    AascShipExecShipmentInfo aascShipExecShipmentInfo = null; // carrier shipment bean class object for parsing the response
//need to add code
    String errorMessage = ""; // holds the error in failed response  
    int responseStatus = 
        0; // holds value of 150 if valid response is returned and is successfully parsed else it holds 151
    String deliveryName = ""; // holds name of the delivery that is shipped
    String outputFilePath = 
        ""; // holds folder name to which request and response are written 

    AascXmlTransmitter aascXmlTransmitter = 
        null; // creates AascXmlTransmitter Object to which the request is sent for processing 
//    AascConnectShipConnection aascConnectShipConnection = null;
    HttpURLConnection connection = 
        null; // url connection with support for http specific features
    String protocol = "";
    String hostName = "";
    String prefix = "";
    String userName = "";
    String password = "";
    String port="";
    String endPointURL="";
    int numPackages; // indicates number of packages for which we require tracking numbers
    String reference1 = ""; // indicates customer purchase order number
    String reference2 = ""; // indicates order number
    String shipToCompanyName = "";
    String shipToAddressLine1 = "";
    String shipToAddressLine2 = "";
    String shipToAddressLine3 = "";
    String shipToAddressCity = "";
    String shipToAddressPostalCode = "";
    String shipToCountry = "";
    String shipToAddressState = "";
    java.sql.Date shipDate = null;
    String shipperName = "";
    String printerName = "";
    //This code is present in Elkay code
    /*private String printerPort = "";
    private String stockSymbol = "";
    private String printerModelSymbol = ""; */
    String shipMethodName = "";
    String shipperTerm = "";
    String connectshipSCS = "";
    String ShipExecScsTag = "";
    String customerAccountNumber = "";
    String contactName = "";
    String phoneNumber = "";
    String carrierPayMethod = "";
    String carrierPayMethodCode = "";
    String satShipFlag = "";
    int carrierId = 0;
    String reference123 = "";

    String codFlag = "";
    float codAmount = 0;
    String intlShipFlag = "";

    // variables to hold third party details
    String tpCompanyName = "";
    String tpAddress = "";
    String tpCity = "";
    String tpState = "";
    String tpPostalCode = "";
    String tpCountrySymbol = "";
    String tpDDUCheck = "";
    String countryCode = "";
    //14-11-2011
     String transactionType = ""; 
     String docTabLocation = "";
     String cloudLabelPath = "";
     String labelFormat = ""; //SC_7.0_LB
     String intlLabelFormat=""; //SC_7.0_LB
     
    private String dryIceUnits = "";
    private String chDryIce = "";
    private double dryIceWeight = 0.0;
    int carrierCode = 0;
  String deliveryConfirmation="";//Guru 30-9-2014
    //To get the international details values
    private AascIntlHeaderInfo aascIntlHeaderInfo = null;
    // Variables For individual fields in international pop up
     private String soldCompanyName = "";
         private String soldAddressLine1 = "";
         private String soldAddressLine2 = "";
         private String soldCity = "";
         private String soldStProvinceCd = "";
         private String soldPostalCd = "";
         private String soldCountryCd = "";
         private String soldTaxId = "";

         private String shipToTaxId = "";
         private String shipFromTaxId = "";

         private String ciNumber = "";
         private String ciUOM = "";
         private String ciDesc = "";
         private String ciDesc1 = "";
         private String ciDesc2 = "";
         private String ciDesc3 = "";
         private String prdTarrifCode = "";
         private String prdCountry = "";
         private String ciPricePerUnit = "";
         private String ciPurchaseOrderNumber = "";
         private String ciInvoiceNumber = "";
         private String ciTermsOfShipment = "";
         private String ciReasonForExport = "";
         private String ciComments = "";
         private double ciDiscount = 0.0;
         private double ciFreightCharges = 0.0;
         private double ciInsuranceCharges = 0.0;
         private double ciOtherCharges = 0.0;
         private String ciDeclarationStatement = "";
         private String ciInvoiceDate = "";
         private String ciCurrencyCode = "";
/*
         private String ciInvoiceNumberTag = "";
         private String ciPurchaseOrderNumberTag = "";
         private String ciTermsOfShipmentTag = "";
         private String ciCommentsTag = "";
         private String ciDeclarationStatementTag = "";
         private String ciDiscountTag = "";
         private String ciFreightChargesTag = "";
         private String ciInsuranceChargesTag = "";
         private String ciOtherChargesTag = "";
*/
         private String naftaNetCostCode = "";
         private String naftaNetCostBeginDate = "";
         private String naftaNetCostEndDate = "";
         private String naftaPreferenceCriteria = "";
         private String naftaProducerInfo = "";
         private String naftaCompanyName = "";
         private String naftaAddressLine1 = "";
         private String naftaCity = "";
         private String naftaStateProvinceCode = "";
         private String naftaPostalCode = "";
         private String naftaCountryCode = "";
         private String naftaTaxId = "";
         private String BeginDate = "";
         private String EndDate = "";

         private String naftaProducerValue = "";
         private int uscoNumPkgPerCommodity = 0;
         private String productUOM = "";
         private String productWeight = "";
         private String uscoExportDate = "";
         private String uscoExportingCarrier = "";

         private String sedSchBNumber = "";
         private String sedSchQuantity = "";
         private String sedSchUnitOfMeasurement = "";
         private String sedExportType = "";
         private double sedTotalVal = 0.0;
         private String sedCompanyName = "";
         private String sedAddressLine1 = "";
         private String sedCity = "";
         private String sedStateProvinceCode = "";
         private String sedPostalCode = "";
         private String sedCountryCode = "";
         private String sedExportDate = "";
         private String sedExportingCarrier = "";
         private String sedInBondCode = "";
         private String sedContainerized = "";
         private String sedRoutedExportTransaction = "";
         private String sedPointOfOrigin = "";
         private String sedModeOfTransport = "";
         private String sedPartiesToTransaction = "";
         private String sedLicNumber = "";
         private String sedLicDate = "";
         private String sedCarrierID = "";
         private String sedPortOfUnloading = "";
         private String sedLoadingPier = "";
         private String sedPortOfExport = "";
         private String sedEntryNumber = "";

         //Added By Narasimha Earla for forward agent and intermediate consignee
         private String faCompanyName = "";
         private String faAddressLine1 = "";
         private String faCity = "";
         private String faStateProvinceCode = "";
         private String faPostalCode = "";
         private String faCountryCode = "";
         private String fTaxId = "";
         private String icCompanyName = "";
         private String icAddressLine1 = "";
         private String icCity = "";
         private String icStateProvinceCode = "";
         private String icPostalCode = "";
         private String icCountryCode = "";

         private String shipFromAttention = "";
         private String shipFromPhone = "";
         private String soldToAttention = "";
         private String soldToPhone = "";
         private String invCurrencyCode = "";
         private int invValue = 0;


         private String ciFlag = "";
         private String naftaFlag = "";
         private String uscoFlag = "";
         private String sedFlag = "";
         private String aesFlag="";
         //Gururaj added code for sending ITN number in Ship reqeust
         private String IntlITNNumber ="";
         private String exportCode ="";
  
        // End
        //Start
        private String sedExceptionCode = "";
        private String sedEccnNumber = "";
            //End
        //Variable for storing the description of package 1 commodity 1
        private String shipmentDespcription="";
        //E-mail notification variables
        private String SenderEmail = "";
        private String recipientEmail = "";
        private String recipientEmailAddress2 = "";
        private String recipientEmailAddress3 = "";
        private String recipientEmailAddress4 = "";
        private String recipientEmailAddress5 = "";
        private String emailReference1 = "";
        private String emailReference2 = "";
        private String Format = "";
        private String message = "";
        private String shipNotificationAddressEmail="";
        //End
        //Paperless document submission
         private String intlDocSubType;
        //End
         private String timeStampStr = 
             (new Date().toString().replaceAll(" ", "_")).replaceAll(":", "_");
             
         //Hazmat details
          private String HazMat = "";
              private String HazMatFlag = "";
              private String HazMatType = "";
              private String HazMatClass = "";
              private LinkedList hazCoList = null; 
              
    private double HazMatQty = 0.0;
         private String HazMatUnit = "";
         
    private String HazMatIdentificationNo = "";
        private String HazMatEmergencyContactNo = "";
        private String HazMatEmergencyContactName = "";
        private String HazardousMaterialPkgGroup = "";
        private String HazMatDOTLabelType = "";
        private String HazardousMaterialId = "";
        
    // Added on Jul-05-2011
         double hazmatPkgingCnt = 0.0;
         String hazmatPkgingUnits = "";
         String hazmatTechnicalName = "";
         //Edd on Jul-05-2011
         String hazmatSignatureName = "";
         String hazmatPackInstructions = "";
         String HazMatOverPackFlag = "";
         //hazmat details End
//         AascLineInfo aascLineInfo=null;
         LinkedList lineList=null;
         String commmodityClass="";
         String packageDescription="";
         
         //Getting the ShipFrom details
          private String shipFromCompanyName = 
              ""; // indicates the company name from which delivery is being shipped
          private String shipFromPersonName = "";
          private String shipFromPhoneNumber = ""; // indicates sender phone number
          private String shipFromAddressLine1 = ""; // indicates ship From address   
          private String shipFromAddressLine2 = ""; // indicates ship From address 
          private String shipFromAddressLine3 = ""; // indicates ship From address 
          private String shipFromAddressCity = 
              ""; // indicates ship From address city    
          private String shipFromAddressPostalCode = 
              ""; // indicates ship From postal code
          private String shipFromCountry = ""; // indicates ship From country
          private String shipFromAddressState = 
              ""; // indicates ship From state address
         //ShipFrom Details End
         /** default constructor.
          */    
    public AascShipExecShipment() {
    }
    
    
    /** creates a shipment by using the WSDL client, the files generated by consuming the WSDL. Here the requests and responses are not saved but 
     * everything is object setting.
     * @param aascShipmentOrderInfo aascShipmentOrderInfo Object to get the Delivery Information
     * @param aascShipMethodInfo AascShipMethodInfo Object to get the ShipMethod Information
     * @param aascProfileOptionsInfo AascProfileOptionsInfo Object to get the label path and also the shipper name
     * @param aascIntlInfo AascIntlInfo Object to get the international commodity information.
     * @return Returns the int value , if 150 the response is success otherwise 
     * if int value is 151 then there is an error in the response file.
     * 
     * */
    public int createShipmentRequest(AascShipmentOrderInfo aascShipmentOrderInfo, 
                                     AascShipMethodInfo aascShipMethodInfo, 
                                     AascProfileOptionsBean aascProfileOptionsInfo,
                                     AascIntlInfo aascIntlInfo, String labelpath) {
        logger.info("Entered createShipmentRequest()");
        String printerPort = "";
        String stockSymbol = "";
        String printerModelSymbol = "";
        String residentialAddrFlag = "";
        //Package specific variables....
        float pkgWtVal=0;
        String pkgWtUom = "";
        double intlQuantity;
        String intlQUOM = "";
        double intlUnitWeight;
        double intlUnitValue;
        String intlProductDescription = "";
        String declaredCurrencyCode = "";
        double declaredVal;
        String declaredValFlag = "";
        String additionalHandlingFlag = "";
        String signatureOptions = "";
        String largePackageFlag = "";
        String codFundsCode = "";
        String codCurrencyCode = "";
        String dimensionValue = "";
        String packageDimensionUnits = "";
        String packaging = "";
        String labelFormat = "";
        String shiptoInfoOnLabel="";
        String transactionType = ""; 
        String docTabLocation = "";
       
        
        try {
//            countryCode = aascHeaderInfo.getCountrySymbol();
//            System.out.println("aascProfileOptionsInfo.getCountryCodeFlag()::"+aascProfileOptionsInfo.getCountryCodeFlag());
            aascHeaderInfo = aascShipmentOrderInfo.getShipmentHeaderInfo();
            linkedList = aascShipmentOrderInfo.getShipmentPackageInfo();
            outputFilePath = cloudLabelPath; // path from profile options to which request and response are written        
            if (aascShipmentOrderInfo != null && aascHeaderInfo != null && linkedList != null && aascShipMethodInfo != null) 
            {
                logger.info("inside if ::::::::::::: ");
                intlShipFlag = nullStrToSpc(aascHeaderInfo.getInternationalFlag());
                logger.info("intlShipFlag :: "+intlShipFlag);
                deliveryName = nullStrToSpc(aascHeaderInfo.getOrderNumber());
                carrierId = aascHeaderInfo.getCarrierId();
                numPackages = linkedList.size();
                reference1 = encode(nullStrToSpc(aascHeaderInfo.getReference1()));
                reference2 = encode(nullStrToSpc(aascHeaderInfo.getReference2()));
                shipToCompanyName = nullStrToSpc(aascHeaderInfo.getCustomerName());
                shiptoInfoOnLabel = nullStrToSpc(aascHeaderInfo.getShipToLocationName());
                logger.info("shiptoInfoOnLabel in ConnectShip shipment::" + shiptoInfoOnLabel);
                if (shiptoInfoOnLabel.equalsIgnoreCase("CUSTOMER NAME")) {
                    shipToCompanyName = shipToCompanyName;
                }
                else if (shiptoInfoOnLabel.equalsIgnoreCase("SHIP TO LOCATION")) 
                {
                    if (aascHeaderInfo.getShipToLocationName().length() > 35) 
                    {
                        shipToCompanyName = nullStrToSpc(aascHeaderInfo.getShipToLocationName()).substring(0,35);
                    } 
                    else 
                    {
                        shipToCompanyName = nullStrToSpc(aascHeaderInfo.getShipToLocationName());
                    }
                } 
                else 
                {
                    shipToCompanyName = shipToCompanyName;
                }
                logger.info("shipToCompanyName in ConnectShip shipment::" + shipToCompanyName); 
                shipToAddressLine1 = nullStrToSpc(aascHeaderInfo.getAddress());
                shipToAddressLine2 = nullStrToSpc(aascHeaderInfo.getShipToAddrLine2());
                shipToAddressLine3 = nullStrToSpc(aascHeaderInfo.getShipToAddrLine3());
                shipToAddressCity = encode(nullStrToSpc(aascHeaderInfo.getCity()));
                shipToAddressPostalCode = nullStrToSpc(aascHeaderInfo.getPostalCode());
                shipToCountry = encode(nullStrToSpc(aascHeaderInfo.getCountrySymbol()));
                shipToAddressState = encode(nullStrToSpc(aascHeaderInfo.getState()));
                shipDate = aascHeaderInfo.getShipmentDate();
                shipperName = nullStrToSpc(aascHeaderInfo.getShipExecShipperName());
                //System.out.println("486::"+shipperName);
                carrierCode = aascShipMethodInfo.getCarrierCode(carrierId);
                labelFormat = aascShipMethodInfo.getPrinterPort(carrierId); // retreiving label format from shipMethod bean 
                printerPort = aascShipMethodInfo.getPrinterEODPort(carrierId);
                stockSymbol = aascShipMethodInfo.getPrinterStockSymbol(carrierId); 
                printerModelSymbol = aascShipMethodInfo.getPrinterModelSymbol(carrierId);
                intlLabelFormat=aascShipMethodInfo.getIntlLabelFormat(carrierId); 
                shipMethodName = nullStrToSpc(aascHeaderInfo.getShipMethodMeaning());
                connectshipSCS = nullStrToSpc(aascShipMethodInfo.getConnectShipScsTag(shipMethodName));
                logger.info("connectshipSCS in AascshipExecShipment ::::"+connectshipSCS+":::::::::");
                aascHeaderInfo.setCarrierServiceLevel(connectshipSCS);
                logger.info("connectshipSCS in AascshipExecShipment after ShipExec::::"+connectshipSCS+":::::::::");
                //To replece the value from TANDATA_UPS.UPS. to CONNECTSHIP_UPS.UPS.
//                connectshipSCS=connectshipSCS.replaceAll("TANDATA","CONNECTSHIP");
//                logger.info("connectshipSCS after replace:: "+connectshipSCS);    
                try
                {
                    //Removing charecter 'W' from the shipMethod as ShipExec will not accept 'W' 
                    //for Example CONNECTSHIP_UPS.UPS.WEXP and accepts only CONNECTSHIP_UPS.UPS.EXP
                     if(carrierCode!=999 && carrierCode!=114) 
                    connectshipSCS=connectshipSCS.replaceAll("W","");
                    logger.info("connectshipSCS after replace for internaional shipping:: "+connectshipSCS); 
                }
                catch(Exception e) 
                {
                    logger.info("connectshipSCS in catch block:: "+connectshipSCS);    
                }
                
                customerAccountNumber = nullStrToSpc(aascHeaderInfo.getCarrierAccountNumber());
                contactName = nullStrToSpc(aascHeaderInfo.getContactName());
                phoneNumber = nullStrToSpc(aascHeaderInfo.getPhoneNumber());
                carrierPayMethod = nullStrToSpc(aascHeaderInfo.getCarrierPaymentMethod());
                carrierPayMethodCode = nullStrToSpc(aascShipMethodInfo.getCarrierPayCode(carrierPayMethod));
                shipperTerm = nullStrToSpc(aascShipMethodInfo.getCsCarrierPayTerm(carrierPayMethodCode));
                satShipFlag = nullStrToSpc(aascHeaderInfo.getSaturdayShipFlag());
                residentialAddrFlag = nullStrToSpc(aascHeaderInfo.getResidentialFlag());
                protocol = nullStrToSpc(aascShipMethodInfo.getProtocol(carrierId));
                logger.info("protocol::"+protocol+":::::");
                hostName = nullStrToSpc(aascShipMethodInfo.getCarrierServerIPAddress(carrierId));            
                logger.info("hostName::"+hostName+":::::");
                prefix   = nullStrToSpc(aascShipMethodInfo.getCarrierPrefix(carrierId));            
                logger.info("prefix::"+prefix+":::::");
                port = nullStrToSpc(aascShipMethodInfo.getCarrierPort(carrierId));
                logger.info("port::"+port+":::::");
                 endPointURL=protocol+"://"+hostName+":"+port+"/"+prefix;
                logger.info("endPointURL::"+endPointURL+":::");
                userName = nullStrToSpc(aascShipMethodInfo.getCarrierUserName(carrierId));            
                password = nullStrToSpc(aascShipMethodInfo.getCarrierPassword(carrierId));        
                if("".equalsIgnoreCase(contactName)) 
                {
                    contactName=aascHeaderInfo.getShipFromContactName();
                }                                
                if("".equalsIgnoreCase(phoneNumber)) 
                {
                    phoneNumber=aascHeaderInfo.getShipFromPhoneNumber1();
                }
                shiptoInfoOnLabel = shipToCompanyName;//nullStrToSpc(aascProfileOptionsInfo.getShipToLocOnLabel());
                if (shiptoInfoOnLabel.equalsIgnoreCase("CUSTOMER NAME")) 
                {
                    shipToCompanyName = shipToCompanyName;
                } 
                else  if(shiptoInfoOnLabel.equalsIgnoreCase("SHIP TO LOCATION")) 
                {
                    if(aascHeaderInfo.getShipToLocationName().length()>35)
                    {
                        shipToCompanyName = nullStrToSpc(aascHeaderInfo.getShipToLocationName()).substring(0,35);
                    }
                    else
                    {
                        shipToCompanyName = nullStrToSpc(aascHeaderInfo.getShipToLocationName());
                    }
                }
                else  if(shiptoInfoOnLabel.equalsIgnoreCase("CUSTOM")) 
                {
                    if(("".equalsIgnoreCase(aascHeaderInfo.getCustomerName())) || aascHeaderInfo.getCustomerName().equalsIgnoreCase(null))
                    {
                        shipToCompanyName = shipToCompanyName;
                    }
                    else
                    {
                        if(aascHeaderInfo.getCustomerName().length()>35)
                        {
                            shipToCompanyName = nullStrToSpc(aascHeaderInfo.getCustomerName()).substring(0,35);
                        }
                        else 
                        {
                            shipToCompanyName = nullStrToSpc(aascHeaderInfo.getCustomerName());
                        }
                    }
                }
//                   System.out.println("shipToCompanyName*************"+shipToCompanyName);
              
                SenderEmail = aascHeaderInfo.getShipFromEmailId();
                recipientEmail = aascHeaderInfo.getShipToEmailId();
            
//                emailReference1 = aascHeaderInfo.getEmailRef1();
//                emailReference2 = aascHeaderInfo.getEmailRef2();
                Format = aascHeaderInfo.getFormatType();
//                message = encode(nullStrToSpc(aascHeaderInfo.getemailMessage()));
                logger.info("Email Notification information .. \n"+
                            "SenderEmail ::"+SenderEmail+"\n"+
                            "recipientEmailAddress1 ::"+recipientEmail+"\n"+
                            "recipientEmailAddress2 ::"+recipientEmailAddress2+"\n"+
                            "recipientEmailAddress3 ::"+recipientEmailAddress3+"\n"+
                            "recipientEmailAddress4 ::"+recipientEmailAddress4+"\n"+
                            "recipientEmailAddress5 ::"+recipientEmailAddress5+"\n"+
                            "emailReference1 ::"+emailReference1+"\n"+
                            "emailReference2 ::"+emailReference2+"\n"+
                            "Format ::"+Format+"\n"+
                            "message ::"+message+"\n"
                            );
              
              if(!"".equalsIgnoreCase(recipientEmail))
              {
                shipNotificationAddressEmail = shipNotificationAddressEmail+ "," + recipientEmail;
              }
              if(!"".equalsIgnoreCase(recipientEmailAddress2))
              {
                shipNotificationAddressEmail = shipNotificationAddressEmail+ "," + recipientEmailAddress2;
              }
              if(!"".equalsIgnoreCase(recipientEmailAddress3))
              {
                shipNotificationAddressEmail = shipNotificationAddressEmail+ "," + recipientEmailAddress3;
              }
              if(!"".equalsIgnoreCase(recipientEmailAddress4))
              {
                shipNotificationAddressEmail = shipNotificationAddressEmail+ "," + recipientEmailAddress4;
              }
              if(!"".equalsIgnoreCase(recipientEmailAddress5))
              {
                shipNotificationAddressEmail = shipNotificationAddressEmail+ "," + recipientEmailAddress5;
              }
              logger.info("shipNotificationAddressEmail::::::"+shipNotificationAddressEmail+"::::::");
              if(!"".equalsIgnoreCase(shipNotificationAddressEmail))
              {
                if(','==shipNotificationAddressEmail.charAt(0))
                {
                  shipNotificationAddressEmail=shipNotificationAddressEmail.substring(1,shipNotificationAddressEmail.length());
                }
              }
              
              logger.info("shipNotificationAddressEmail::::::"+shipNotificationAddressEmail+"::::::");
              //Getting the details of ShipFrom from aascHeaderInfo
               shipFromAddressLine1 = (nullStrToSpc(aascHeaderInfo.getAddress())); // indicates ship From address
               shipFromAddressLine2 =(nullStrToSpc(aascHeaderInfo.getShipFromAddressLine2()));
              shipFromAddressCity = (aascHeaderInfo.getCity()); // indicates ship From address city   
               shipFromAddressState = (aascHeaderInfo.getShipFromAddressState().toUpperCase());
               shipFromAddressPostalCode = nullStrToSpc((aascHeaderInfo.getPostalCode())); // indicates ship From postal code                                   
               shipFromCountry = (aascHeaderInfo.getCountrySymbol().toUpperCase()); // indicates ship From country            
               shipFromCompanyName = (nullStrToSpc(aascHeaderInfo.getCarrierName())); // retreiving ship from company name from header bean                   
               shipFromPhoneNumber = nullStrToSpc((aascHeaderInfo.getPhoneNumber()));
              //ShipFrom details End
              
//-------------------------------------------------------------------------------------------------------------------------------------------------------------
                 WcfShipClient shipExecClient=new WcfShipClient(); 
                 logger.info("Before setting the end point::: "+shipExecClient.getEndpoint());
                shipExecClient.setEndpoint(endPointURL);
                logger.info("calling " + shipExecClient.getEndpoint());
                ShipmentRequest shipmentRequestObject=new ShipmentRequest();
                NameAddress nameAddress=new NameAddress();
                //Setting the ShipTo details from header bean
                nameAddress.setCompany(shipToCompanyName);
                nameAddress.setContact(contactName);
                nameAddress.setAddress1(shipToAddressLine1);
                nameAddress.setAddress2(shipToAddressLine2);
                nameAddress.setAddress3(shipToAddressLine3);
                nameAddress.setCity(shipToAddressCity);
                nameAddress.setState_province(shipToAddressState);
                nameAddress.setPostal_code(shipToAddressPostalCode);
//                nameAddress.setCountry_symbol(shipToCountry);
                nameAddress.setCountry_ISO2(shipToCountry);
                nameAddress.setPhone(phoneNumber);
                nameAddress.setValidateAddress(false);
                //Ship To details end
                //Residential flag in shipment page
                logger.info("residentialAddrFlag :::::"+residentialAddrFlag+"::::::::::::::");
                if("Y".equalsIgnoreCase(residentialAddrFlag)) {
                    nameAddress.setResidential(true);
                }
                else {
                    nameAddress.setResidential(false);
                }
                // Residential flag code end
                logger.info("carrierPayMethodCode :: "+carrierPayMethodCode);
                Package packageObject=new Package();
                packageObject.setCommodity_class("");
                packageObject.setConsignee(nameAddress);
//                PackageRequest[] packagesObject=shipmentRequestObject.getPackages();//(shipmentRequestObject.getPackages())[0];
//                System.out.println("packageObject::::"+packageObject);
//                packageObject.setConsignee(nameAddress); // Adding the shipTo address to Consignee bean in Package class in proxy
                /*Setting the third Party details to the shipping request
                 * Required details for Third Party Billing are
                 * CompanyName,Address,City,State,PostalCode,CountrySymbol
                 * Flag for Third_Party_Billing to be set to true
                 * The Third Party billing account number 
                 * 
                */
                if ("TP".equalsIgnoreCase(carrierPayMethodCode))
                {
                    tpCompanyName = nullStrToSpc(aascHeaderInfo.getTpCompanyName());
                    tpAddress = nullStrToSpc(aascHeaderInfo.getTpAddress());
                    tpCity = nullStrToSpc(aascHeaderInfo.getTpCity());
                    tpState = nullStrToSpc(aascHeaderInfo.getTpState());
                    tpPostalCode = nullStrToSpc(aascHeaderInfo.getTpPostalCode());
                    tpCountrySymbol = nullStrToSpc(aascHeaderInfo.getTpCountrySymbol());
                    logger.info("tpCompanyName :: "+tpCompanyName+
                                "\n tpAddress :: "+tpAddress+
                                "\n tpCity :: "+tpCity+
                                "\n tpState :: "+tpState+
                                "\n tpPostalCode ::"+tpPostalCode+
                                "\n tpCountrySymbol ::"+tpCountrySymbol+"\n");
                    packageObject.setThird_party_billing(true);
                    logger.info("customerAccountNumber in third party::"+customerAccountNumber);
                    packageObject.setThird_party_billing_account(customerAccountNumber);
                    NameAddress third_party_billing_address=new NameAddress();
                    third_party_billing_address.setAddress1(tpAddress);
                    third_party_billing_address.setCity(tpCity);
                    third_party_billing_address.setCompany(tpCompanyName);
                    third_party_billing_address.setCountry_ISO2(tpCountrySymbol);
                    third_party_billing_address.setPostal_code(tpPostalCode);
                    third_party_billing_address.setState_province(tpState);
                    third_party_billing_address.setCountry_symbol(tpCountrySymbol);
                    //Setting the third_party_billing_address to bean in Package class in proxy
                    packageObject.setThird_party_billing_address(third_party_billing_address);
                }
                /*
                 * For Recipient which will be treated as Freight collect by ShipExec
                 * The Terms tag should be set to CONSIGNEE 
                 * The consignee account number also must be provided
                 */
                if ("CG".equalsIgnoreCase(carrierPayMethodCode)  || "FC".equalsIgnoreCase(carrierPayMethodCode))
                {
                    packageObject.setTerms("CONSIGNEE");
                    logger.info("customerAccountNumber in third party::"+customerAccountNumber);
                    packageObject.setConsignee_account(customerAccountNumber);
                }
                if ("DU".equalsIgnoreCase(carrierPayMethodCode))// Put an or condition for DT
                {
                    packageObject.setTerms("DDU");
                  tpCompanyName = nullStrToSpc(aascHeaderInfo.getTpCompanyName());
                  tpAddress = nullStrToSpc(aascHeaderInfo.getTpAddress());
                  tpCity = nullStrToSpc(aascHeaderInfo.getTpCity());
                  tpState = nullStrToSpc(aascHeaderInfo.getTpState());
                  tpPostalCode = nullStrToSpc(aascHeaderInfo.getTpPostalCode());
                  tpCountrySymbol = nullStrToSpc(aascHeaderInfo.getTpCountrySymbol());
                  logger.info("Inside DDU Third Party\n tpCompanyName :: "+tpCompanyName+
                              "\n tpAddress :: "+tpAddress+
                              "\n tpCity :: "+tpCity+
                              "\n tpState :: "+tpState+
                              "\n tpPostalCode ::"+tpPostalCode+
                              "\n tpCountrySymbol ::"+tpCountrySymbol+"\n");
                    
//                  tpDDUCheck = nullStrToSpc(aascHeaderInfo.getTpDDUCheck());
//                  logger.info("tpDDUCheck :: "+tpDDUCheck);
//                    if(!"".equalsIgnoreCase(tpDDUCheck) && !"N".equalsIgnoreCase(tpDDUCheck)) // compare check box 
//                    {
//                      
//                      packageObject.setConsignee_third_party_billing(true);
//                      logger.info("customerAccountNumber in DDU third party::"+customerAccountNumber);
//                      packageObject.setConsignee_third_party_billing_account(customerAccountNumber);
//                      NameAddress consignee_third_party_billing_address=new NameAddress();
//                      consignee_third_party_billing_address.setAddress1(tpAddress);
//                      consignee_third_party_billing_address.setCity(tpCity);
//                      consignee_third_party_billing_address.setCompany(tpCompanyName);
//                      consignee_third_party_billing_address.setCountry_ISO2(tpCountrySymbol);
//                      consignee_third_party_billing_address.setPostal_code(tpPostalCode);
//                      consignee_third_party_billing_address.setState_province(tpState);
//                      consignee_third_party_billing_address.setCountry_symbol(tpCountrySymbol);
////                      Setting the third_party_billing_address to bean in Package class in proxy
//                      packageObject.setConsignee_third_party_billing_address(consignee_third_party_billing_address);
//                    }
                    
                }
                if("CF".equalsIgnoreCase(carrierPayMethodCode))
                {
                  packageObject.setTerms("CFR");
                }
                if("CI".equalsIgnoreCase(carrierPayMethodCode))
                {
                  packageObject.setTerms("CIF");
                }
                if("CP".equalsIgnoreCase(carrierPayMethodCode))
                {
                  packageObject.setTerms("CPT");
                }
                if("FA".equalsIgnoreCase(carrierPayMethodCode))
                {
                  packageObject.setTerms("FCA");
                }
                if(carrierCode==114)
                {
                  packageObject.setPackaging(aascHeaderInfo.getPackaging());
                }  
              
                logger.info("reference 1 : "+reference1);
                logger.info("reference 2 : "+reference2);
                
                packageObject.setShipper_reference(reference1);
                packageObject.setConsignee_reference(reference2);
//                packageObject.setShipper("DEMO");
//System.out.println("shipperName::::"+shipperName);
              packageObject.setShipper(shipperName);
                
                logger.info("satShipFlag::"+satShipFlag+":::::::::::");
                
                if("Y".equalsIgnoreCase(satShipFlag))
                {
                  packageObject.setSaturday_delivery(true);
                }  
              
                logger.info("  packageObject.getShipper() ::: "+packageObject.getShipper());
                packageObject.setSubcategory(connectshipSCS);
                logger.info("packageObject.getSubcategory() :: "+ packageObject.getSubcategory());
                Calendar cal = Calendar.getInstance();
                logger.info("ShipDate :: "+shipDate);

                
                logger.info(new SimpleDateFormat("MM-dd-yyyy").format(shipDate));
                logger.info(new SimpleDateFormat("yyyy-MM-dd").format(shipDate));
                logger.info("shipDate ::"+shipDate);
                
                cal.setTime(shipDate); 
                packageObject.setShipdate(new SimpleDateFormat("yyyy-MM-dd").format(shipDate));
                
               
                
                
                logger.info("packageObject.getShipdate() "+packageObject.getShipdate());
                Calendar cal1=Calendar.getInstance();
                String shipDateFromClient=packageObject.getShipdate();
                logger.info("time from the object::::: "+shipDateFromClient);
                logger.info("getting package info from package bean");
             
                
//                Calendar calNew = Calendar.getInstance();
//                calNew.setTime(aascHeaderInfo.getShipTimeStamp());
//                logger.info("aascHeaderInfo.getShipTimeStamp() :: "+aascHeaderInfo.getShipTimeStamp());
//                logger.info("calNew :: "+calNew);
// System.out.println("aascHeaderInfo.getEmailNotificationFlag():::"+aascHeaderInfo.getEmailNotificationFlag());
 
 if("Y".equalsIgnoreCase(aascHeaderInfo.getEmailNotificationFlag())){                
                //Setting the email notification variables
                if(!"".equalsIgnoreCase(shipNotificationAddressEmail))
                {
                  if(!"".equalsIgnoreCase(SenderEmail))
                  {
                    packageObject.setShip_notification_sender_name(SenderEmail); // setting the sender name 
                  }
                     if(!"".equalsIgnoreCase(recipientEmail))
                     {
                       packageObject.setShip_notification_address_email(recipientEmail); // setting the recipient name 
                     }
                  packageObject.setShip_notification_email(true);
                  packageObject.setShip_notification_address_email(shipNotificationAddressEmail); // setting all the email addresses seperated by commas
                  packageObject.setShip_notification_description(message);// The description is set from shipment page
//                  packageObject.setShip_notification_subject_text(); // Need to set the subject from clarification
                }
                  logger.info("packageObject.getShip_notification_sender_name()::"+packageObject.getShip_notification_sender_name());
                  logger.info("packageObject.getShip_notification_sender_name()::"+packageObject.getShip_notification_address_email());
                  logger.info("packageObject.getShip_notification_description()::"+packageObject.getShip_notification_description());
                  logger.info("packageObject.getShip_notification_email()::"+packageObject.getShip_notification_email());

                }
                
                //E-mail notification details end
              
                 packageObject.setCommodity_class(commmodityClass);
                listIterator = linkedList.listIterator();
                logger.info("linkedList.size() :::: "+linkedList.size());
                PackageRequest packageRequestObject[]=new PackageRequest[linkedList.size()];
                int count=0;//SC_7.0_LB
                //Getting Package details from package bean
                 while (listIterator.hasNext()) 
                 {
                    aascPackageBean = (AascShipmentPackageInfo)listIterator.next();
                    if (aascPackageBean == null) 
                    {
                        logger.info("delivery package information bean is null(aascPackageBean==null)");
                    }
                    else 
                    {
                        pkgWtVal = aascPackageBean.getWeight();
                        pkgWtUom = nullStrToSpc(aascPackageBean.getUom());
                        codFlag = nullStrToSpc(aascPackageBean.getCodFlag());
                        logger.info("codFlag::::::::::::::::::"+codFlag+"::::::::");
                        codAmount = aascPackageBean.getCodAmt();
                        logger.info("codAmount::::::::::::"+codAmount+"::::::::::::::");
                        intlQuantity = aascPackageBean.getIntlQuantity();
                        intlQUOM = nullStrToSpc(aascPackageBean.getIntlQUOM());
                        intlUnitWeight = aascPackageBean.getIntlUnitWeight();
                        intlUnitValue = aascPackageBean.getIntlUnitValue();
                        intlProductDescription = 
                                nullStrToSpc(aascPackageBean.getIntlProductDescription());
                        declaredCurrencyCode = 
                                nullStrToSpc(aascPackageBean.getDeclaredCurrCode());
                        declaredVal = 
                                aascPackageBean.getPackageDeclaredValue();
//                        declaredValFlag = 
//                                nullStrToSpc(aascPackageBean.getDeclaredValFlag());
                        additionalHandlingFlag = 
                                nullStrToSpc(aascPackageBean.getAdditionalHandling());
                        logger.info("additionalHandlingFlag::::::::::::"+additionalHandlingFlag+"::::::::::::::");
                         signatureOptions = 
                                nullStrToSpc(aascPackageBean.getSignatureOptions());
                        largePackageFlag = 
                                nullStrToSpc(aascPackageBean.getLargePackage());
                        logger.info("largePackageFlag::::::::::::"+largePackageFlag+"::::::::::::::");
                         codFundsCode = 
                                nullStrToSpc(aascPackageBean.getCodFundsCode());
                        logger.info("codFundsCode :: "+codFundsCode);        
                        codCurrencyCode = 
                                nullStrToSpc(aascPackageBean.getCodCurrCode());
                        dimensionValue = 
                                nullStrToSpc(aascPackageBean.getPackageLength() + 
                                             "x" + 
                                             aascPackageBean.getPackageWidth() + 
                                             "x" + 
                                             aascPackageBean.getPackageHeight());
                        packageDimensionUnits = 
                                nullStrToSpc(aascPackageBean.getDimensionUnits());
                        packaging = 
                                nullStrToSpc(aascPackageBean.getPackaging());

                        logger.info("packaging::"+packaging+"::::");
                        if (pkgWtUom.equalsIgnoreCase("LBS")) {
                            pkgWtUom = "LB";
                        }

                        if (pkgWtUom.equalsIgnoreCase("KGS")) {
                            pkgWtUom = "KG";
                        }

                    

                        dryIceUnits = aascPackageBean.getDryIceUnits();
                        chDryIce = aascPackageBean.getDryIceChk();
                        dryIceWeight = aascPackageBean.getDryIceWeight();
                      
                        
                        logger.info("pkgWtVal :::::::::::::: "+pkgWtVal);
                        PackageRequest request=new PackageRequest();
                        request.setDescription(packageDescription);//Setting the package description as the line item desciption for UPS Fireight carrier
                        if(carrierCode==114) {
                            request.setDescription(aascHeaderInfo.getPackaging());
                        }
                        BigDecimal weight = new BigDecimal(pkgWtVal, MathContext.DECIMAL64);
                        //java.math.BigDecimal weight=new java.math.BigDecimal(pkgWtVal);
                        logger.info("weight :: "+weight);
                        request.setWeight(weight);
                        logger.info("dimensionValue::"+dimensionValue+":::::");
                        request.setDimension(dimensionValue);
                        logger.info("pkgWtUom::"+pkgWtUom+":::");
                        request.setWeight_unit(pkgWtUom);
                        BigDecimal CODAmount=new BigDecimal(codAmount);
                        if("Y".equalsIgnoreCase(codFlag))
                        {
                          request.setCod_amount(CODAmount);
                          
                          request.setCod_amount_unit(codCurrencyCode);
                          logger.info("codFundsCode :: "+codFundsCode);
                          request.setCod_payment_method(Integer.parseInt(codFundsCode));
                          
                        }
                        logger.info("largePackageFlag::"+largePackageFlag+"::::::");
                        if("Y".equalsIgnoreCase(largePackageFlag))
                        {
                          request.setLarge_package(true);
                        }
                        logger.info("additionalHandlingFlag::"+additionalHandlingFlag+"::::::");
                        if("Y".equalsIgnoreCase(additionalHandlingFlag))
                        {
                          request.setAdditional_handling(true);
                        }
                        //Delivery Confirmation method
                        deliveryConfirmation= aascPackageBean.getSignatureOptions();
                        logger.info("deliveryConfirmation::"+deliveryConfirmation+"::::");
                        if("NA".equalsIgnoreCase(deliveryConfirmation))
                        {
                            // NO_DELIVERY_CONFIRMATION
                            request.setProof(false);
                            
                        }
                        if("2".equalsIgnoreCase(deliveryConfirmation))
                        {
                            //SIGNATURE_REQUIRED
                            request.setProof(true);
                            request.setProof_require_signature(true);
                        }
                        if("1".equalsIgnoreCase(deliveryConfirmation))
                        {
                            //NO_SIGNATURE_REQUIRED
                             request.setProof(true);
                             request.setProof_require_signature(false);
                            
                        }
                        if("3".equalsIgnoreCase(deliveryConfirmation))
                        {
                            //ADULT_SIGNATURE_REQUIRED
                            request.setProof(true);
                            request.setProof_require_signature_adult(true);
                        }
                        //Delivery Confirmation code end
                        //Hazmat details
                          HazMatFlag = aascPackageBean.getHazMatFlag();
                          logger.info("**** HazMatFlag ****" + HazMatFlag);
    
                          hazCoList = aascPackageBean.getHazmatPackageInfoList();
                          if (hazCoList == null) {
                              hazCoList = new LinkedList();
                          }
                          logger.info("**** hazCoList size ****" + hazCoList.size());
//                          HazMatOverPackFlag = 
//                                  nullStrToSpc(aascPackageBean.getHazMatOverPackFlag());
                        if ("Y".equalsIgnoreCase(HazMatFlag)) {
                        request.setHazmat(true);
                 //       System.out.println("inside if ");
//                            ListIterator hazCoInfoIterator = hazCoList.listIterator();
//                            HashMap hazCommodityHM[] = new HashMap[hazCoList.size()];
                            HazMatContent hazMatContent[]=new HazMatContent[1];
                            int index = 0;
//                            while (hazCoInfoIterator.hasNext()) {
                   //         System.out.println("in hazmat while loop");
                                hazMatContent[index] =new HazMatContent();
                                HazMatClass = aascPackageBean.getHazMatClass();
                                HazMatDOTLabelType = aascPackageBean.getHazMatDOTLabel();
                                HazMatEmergencyContactName = aascPackageBean.getHazMatEmerContactName();
                                HazMatEmergencyContactNo = aascPackageBean.getHazMatEmerContactNo();
                                HazMatIdentificationNo = aascPackageBean.getHazMatIdNo();                                
                                hazmatPackInstructions = aascPackageBean.getHazmatPackInstructions();
                                HazardousMaterialPkgGroup =  aascPackageBean.getHazMatPkgGroup();
                                
                                hazmatPkgingCnt =   aascPackageBean.getHazmatPkgingCnt();
                                hazmatPkgingUnits = aascPackageBean.getHazmatPkgingUnits();
                                
                                HazMatQty = aascPackageBean.getHazMatQty();
                                BigDecimal hazMatQuantity=new BigDecimal(HazMatQty);
                               
                                hazmatSignatureName = aascPackageBean.getHazmatSignatureName();
                                hazmatTechnicalName = aascPackageBean.getHazmatTechnicalName();
                                HazMatType = aascPackageBean.getHazMatType();
                                HazMatUnit = aascPackageBean.getHazMatUnit();
                               
                                
                                
                                logger.info("***********************************Hazmat details****************************** ");
                                logger.info("HazMatClass :: "+HazMatClass +
                                            "\n+HazMatDOTLabelType :: "+HazMatDOTLabelType +
                                            "\n+HazMatEmergencyContactName :: "+HazMatEmergencyContactName +
                                            "\n+HazMatEmergencyContactNo :: "+HazMatEmergencyContactNo +
                                            "\n+HazMatIdentificationNo :: "+HazMatIdentificationNo + 
                                            "\n+hazmatPackInstructions :: "+hazmatPackInstructions + 
                                            "\n+HazardousMaterialPkgGroup :: "+HazardousMaterialPkgGroup +
                                            "\n+hazmatPkgingCnt :: "+hazmatPkgingCnt +
                                            "\n+hazmatPkgingUnits :: "+hazmatPkgingUnits +
                                            "\n+HazMatQty :: "+HazMatQty +
                                            "\n+hazmatSignatureName :: "+hazmatSignatureName +
                                            "\n+hazmatTechnicalName :: "+hazmatTechnicalName +
                                            "\n+HazMatType :: "+HazMatType +
                                            "\n+HazMatUnit :: "+HazMatUnit );
                                logger.info("***********************************Hazmat details****************************** ");
                                String ShippingName = "";
                                String ShippingName1 = "";
                                String ShippingName2 = "";
                                String ShippingName3 = "";
                                String Class = "";
                                if (!HazMatClass.equalsIgnoreCase("")) {
                                    logger.info("%%%%%%%%####HazMatClass####%%%%%%%" + HazMatClass);
                                    logger.info("HazMatClass===" + HazMatClass);
                                    int classIndex = HazMatClass.indexOf("Class", 1);
                                    if (classIndex == -1) {
                                        classIndex = HazMatClass.indexOf("CLASS", 1);
                                                                     logger.info("Entered CLASS");
                                    }
                                    logger.info("classIndex==" + classIndex);
                                    int firstIndex = 0;
                                    logger.info("HazMatClass==" + HazMatClass);
                                    firstIndex = HazMatClass.indexOf("-");
                                    logger.info("firstIndex==" + firstIndex);
                                    String HazMatClassStr = HazMatClass.substring(0, firstIndex);
                                    logger.info("HazMatClassStr==" + HazMatClassStr);
                                    if(classIndex == -1) {
                                        logger.info("Entered classIndex = -1 so ShippingName is null");
                                        ShippingName = "";
                                        logger.info("ShippingName==" + ShippingName);
                                        logger.info("HazMatClassStr.indexOf(\" \")==" + HazMatClassStr.indexOf(" "));
                                        logger.info("HazMatClassStr.length()==" + HazMatClassStr.length());
                                        try {
                                             Class = 
                                                     trim(HazMatClassStr.substring(HazMatClassStr.indexOf(" "), 
                                                                                   HazMatClassStr.length()));
                                         } catch (Exception e) {
                                             Class = "";
                                             firstIndex = -1;
                                         }
                                    }
                                    else {
                                        logger.info("Entered else");
                                        ShippingName = HazMatClass.substring(0, classIndex - 1);
                                        logger.info("ShippingName==" + ShippingName);
                                        logger.info("HazMatClassStr.lastIndexOf(\" \")==" + HazMatClassStr.lastIndexOf(" "));
                                        logger.info("HazMatClassStr.length()==" + HazMatClassStr.length());
                                        Class =trim(HazMatClassStr.substring(HazMatClassStr.lastIndexOf(" "), HazMatClassStr.length()));     
                                    }
                                    logger.info("Class==" + Class);
                                    logger.info("HazMatClass final==" + HazMatClass);
                                    if(HazMatClass.length() > firstIndex + 1 + 100) {
                                        ShippingName1 = HazMatClass.substring(firstIndex + 1, firstIndex + 1 + 50);
                                        ShippingName2 = HazMatClass.substring(firstIndex + 1 + 50, firstIndex + 1 + 100);
                                        ShippingName3 =  HazMatClass.substring(firstIndex + 1 + 100,HazMatClass.length());
                                    }
                                    else if(HazMatClass.length() > firstIndex + 1 + 50) {
                                        ShippingName1 = HazMatClass.substring(firstIndex + 1, firstIndex + 1 + 50);
                                        ShippingName2 = HazMatClass.substring(firstIndex + 1 + 50,  HazMatClass.length()); 
                                    }
                                    else if(HazMatClass.length() <= firstIndex + 1 + 50) {
                                        ShippingName1 = HazMatClass.substring(firstIndex + 1, HazMatClass.length());
                                    }
                                    logger.info("      ShippingName : " + ShippingName);
                                    logger.info("      ShippingName1 : " + ShippingName1);
                                    logger.info("      ShippingName2 : " + ShippingName2);
                                    logger.info("      ShippingName3 : " + ShippingName3);
                                    logger.info("%%%%%%%%####ShippingName####%%%%%%%" + ShippingName);
                                    //Mandatory fileds
                                    hazMatContent[index].setHazmat_description(ShippingName1);
                                    hazMatContent[index].setHazmat_quantity(hazMatQuantity);
                                    hazMatContent[index].setHazmat_quantity_unit(HazMatUnit);
                                    hazMatContent[index].setHazmat_class(HazMatClass);
                                    hazMatContent[index].setHazmat_packing_instruction(hazmatPackInstructions);
                                    hazMatContent[index].setHazmat_id(HazMatIdentificationNo);
                                    hazMatContent[index].setHazmat_packing(hazmatPkgingUnits);
                                    //Optional fields
                                    hazMatContent[index].setHazmat_emergency_contact(HazMatEmergencyContactName);
                                    hazMatContent[index].setHazmat_emergency_phone(HazMatEmergencyContactNo);
                                    if("I".equalsIgnoreCase(HazardousMaterialPkgGroup)) {
                                        hazMatContent[index].setHazmat_packing_group(1);
                                    }
                                    else if("II".equalsIgnoreCase(HazardousMaterialPkgGroup)) {
                                        hazMatContent[index].setHazmat_packing_group(2);
                                    }
                                    else if("III".equalsIgnoreCase(HazardousMaterialPkgGroup)) {
                                        hazMatContent[index].setHazmat_packing_group(3);
                                    }
                                    else {
                                        hazMatContent[index].setHazmat_packing_group(0);
                                    }
                                    
                                    hazMatContent[index].setHazmat_technical_name(hazmatTechnicalName);
                                    
                                }
//                                index++; 
//                            }//ened of while
                             request.setHazmat_contents(hazMatContent);
                        }
                        else 
                        {
                            logger.info("Hazmat flag is N");
                        }
                        //Hazmat details end
                        
                        
                        //International pop up details
                        String intFlag = aascHeaderInfo.getIntlShipFlag();
                        logger.info("intlFlag:::::::::" + intFlag);
                        LinkedList coList = null;
                        try 
                        {
                            aascIntlHeaderInfo = aascIntlInfo.getIntlHeaderInfo();
                            coList = aascIntlInfo.getIntlCommodityInfo();
                        }
                        catch(Exception e) 
                        {
                            aascIntlHeaderInfo = new AascIntlHeaderInfo();
                            coList = new LinkedList();
                        }
                        try
                        {
                            if(count==0)
                            {
                              if("Y".equalsIgnoreCase(intlShipFlag))
                              {
                                  logger.info("intFlag is Y");
                                  shipFromAttention = nullStrToSpc(aascIntlHeaderInfo.getShipFromAttention());
                                  shipFromPhone = nullStrToSpc(aascIntlHeaderInfo.getShipFromPhone());
                                  soldToAttention = nullStrToSpc(aascIntlHeaderInfo.getSoldToAttention());
                                  soldToPhone = nullStrToSpc(aascIntlHeaderInfo.getSoldToPhone());
                                  invCurrencyCode = encode(nullStrToSpc(aascIntlHeaderInfo.getInvoiceCurrencyCode()));
                                  invValue = (aascIntlHeaderInfo.getInvoiceValue());
                                  soldTaxId = encode(nullStrToSpc(aascIntlHeaderInfo.getSoldToTaxId()));
                                  shipToTaxId = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlShipToTaxId()));
                                  shipFromTaxId = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlShipFromTaxId()));
                                  ciPurchaseOrderNumber = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlPurchaseOrderNumber()));
                                  ciInvoiceNumber = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlCustomerInvoiceNumber()));
                                  ciTermsOfShipment = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlTermsOfSale()));
                                  ciReasonForExport = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlPurpose())); //need to chk
                                  ciComments = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlComments()));
                                  ciDiscount = aascIntlHeaderInfo.getIntlDiscount();
                                  ciFreightCharges = aascIntlHeaderInfo.getIntlFreightCharge();
                                  ciInsuranceCharges = aascIntlHeaderInfo.getIntlInsuranceCharge();
                                  ciOtherCharges = aascIntlHeaderInfo.getIntlTaxMiscellaneousCharge(); //need to chk 
                                  ciDeclarationStatement = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlDeclarationStmt()));
                                  ciInvoiceDate = convertDate(nullStrToSpc(aascIntlHeaderInfo.getIntlInvoiceDate()));
                                  ciCurrencyCode = encode(nullStrToSpc(aascIntlHeaderInfo.getIntlCurrencyCode()));
                                  BeginDate = nullStrToSpc(aascIntlHeaderInfo.getIntlBlanketPeriodBeginDate());//For ShipExec
                                  EndDate = nullStrToSpc(aascIntlHeaderInfo.getIntlBlanketPeriodEndDate());//For ShipExec
                                  uscoExportDate = convertDate(nullStrToSpc(aascIntlHeaderInfo.getIntlExportDate()));
                                  uscoExportingCarrier = aascIntlHeaderInfo.getIntlExportCarrier();
                                  
                                  
                                  logger.info("Setting SoldTo Address");
                                  try
                                  {
                                    soldCompanyName = nullStrToSpc(aascIntlHeaderInfo.getSoldToAddressInfo().getCompanyName());
                                    soldAddressLine1 = nullStrToSpc(aascIntlHeaderInfo.getSoldToAddressInfo().getAddressLine1());
                                    soldAddressLine2 = nullStrToSpc(aascIntlHeaderInfo.getSoldToAddressInfo().getAddressLine2());
                                    soldCity = nullStrToSpc(aascIntlHeaderInfo.getSoldToAddressInfo().getCity());
                                    soldStProvinceCd = encode(nullStrToSpc(aascIntlHeaderInfo.getSoldToAddressInfo().getStateProvinceCode()));
                                    soldPostalCd = nullStrToSpc(aascIntlHeaderInfo.getSoldToAddressInfo().getPostalCode());
                                    soldCountryCd = encode(nullStrToSpc(aascIntlHeaderInfo.getSoldToAddressInfo().getCountryCode()));
                                  
                                  
                                    
                                  sedCompanyName = encode(nullStrToSpc(aascIntlHeaderInfo.getSedAddressInfo().getCompanyName()));
                                  sedAddressLine1 = encode(nullStrToSpc(aascIntlHeaderInfo.getSedAddressInfo().getAddressLine1()));
                                  sedCity = encode(nullStrToSpc(aascIntlHeaderInfo.getSedAddressInfo().getCity()));
                                  sedStateProvinceCode = encode(nullStrToSpc(aascIntlHeaderInfo.getSedAddressInfo().getStateProvinceCode()));
                                  sedPostalCode = nullStrToSpc(encode(aascIntlHeaderInfo.getSedAddressInfo().getPostalCode()));
                                  sedCountryCode = encode(nullStrToSpc(aascIntlHeaderInfo.getSedAddressInfo().getCountryCode()));
                                  sedExportDate = convertDate(encode(nullStrToSpc(aascIntlHeaderInfo.getSedExportDate())));
                                  sedExportingCarrier = encode(nullStrToSpc(aascIntlHeaderInfo.getSedExportingCarrier()));
                                  sedInBondCode = encode(nullStrToSpc(aascIntlHeaderInfo.getSedInBondCode()));
                                  sedPointOfOrigin = encode(nullStrToSpc(aascIntlHeaderInfo.getSedPointOfOrigin()));
                                  sedModeOfTransport = encode(nullStrToSpc(aascIntlHeaderInfo.getSedModeOfTransport()));
                                  sedPartiesToTransaction = encode(nullStrToSpc(aascIntlHeaderInfo.getSedPartiesToTran())); //need to chk
                                  sedContainerized = nullStrToSpc(aascIntlHeaderInfo.getSedContainerized());
                                  sedRoutedExportTransaction = nullStrToSpc(aascIntlHeaderInfo.getSedRoutedExportTransaction());
                                  sedLicNumber = encode(nullStrToSpc(aascIntlHeaderInfo.getSedLicenceNumber()));
                                  sedLicDate = convertDate(encode(nullStrToSpc(aascIntlHeaderInfo.getSedLicenceDate())));
                                  sedCarrierID = encode(nullStrToSpc(aascIntlHeaderInfo.getSedCarrierIdentificationCode()));
                                  sedPortOfUnloading = encode(nullStrToSpc(aascIntlHeaderInfo.getSedPortOfUnloading()));
                                  sedLoadingPier = encode(nullStrToSpc(aascIntlHeaderInfo.getSedLoadingPier()));
                                  sedPortOfExport = encode(nullStrToSpc(aascIntlHeaderInfo.getSedPortOfExport()));
                                  sedEntryNumber = encode(nullStrToSpc(aascIntlHeaderInfo.getSedEntryNumber()));
                                  
                                  // Added  for forward agent and intermediate consignee
                                  // Forward agent
                                  faCompanyName = encode(nullStrToSpc(aascIntlHeaderInfo.getForwardAgentInfo().getCompanyName()));
                                  faAddressLine1 = encode(nullStrToSpc(aascIntlHeaderInfo.getForwardAgentInfo().getAddressLine1()));
                                  faCity = encode(nullStrToSpc(aascIntlHeaderInfo.getForwardAgentInfo().getCity()));
                                  faStateProvinceCode = encode(nullStrToSpc(aascIntlHeaderInfo.getForwardAgentInfo().getStateProvinceCode()));
                                  faPostalCode = nullStrToSpc(aascIntlHeaderInfo.getForwardAgentInfo().getPostalCode());
                                  faCountryCode = encode(nullStrToSpc(aascIntlHeaderInfo.getForwardAgentInfo().getCountryCode()));
                                  fTaxId = encode(nullStrToSpc(aascIntlHeaderInfo.getForwardAgentInfo().getTaxId()));
                                  
                                  // Intermediate Consignee
                                  icCompanyName = encode(nullStrToSpc(aascIntlHeaderInfo.getIntermediateConsigneeInfo().getCompanyName()));
                                  icAddressLine1 = encode(nullStrToSpc(aascIntlHeaderInfo.getIntermediateConsigneeInfo().getAddressLine1()));
                                  icCity = encode(nullStrToSpc(aascIntlHeaderInfo.getIntermediateConsigneeInfo().getCity()));
                                  icStateProvinceCode = encode(nullStrToSpc(aascIntlHeaderInfo.getIntermediateConsigneeInfo().getStateProvinceCode()));
                                  icPostalCode = nullStrToSpc(aascIntlHeaderInfo.getIntermediateConsigneeInfo().getPostalCode());
                                  icCountryCode = encode(nullStrToSpc(aascIntlHeaderInfo.getIntermediateConsigneeInfo().getCountryCode()));
                                  //Start 
                                  sedExceptionCode = nullStrToSpc(aascIntlHeaderInfo.getSedLicenceExceptionCode());
                                  sedEccnNumber = nullStrToSpc(aascIntlHeaderInfo.getSedECCN());
                                  if (sedExceptionCode.equalsIgnoreCase("CIV") || 
                                      sedExceptionCode.equalsIgnoreCase("CTP") || 
                                      sedExceptionCode.equalsIgnoreCase("ENC") || 
                                      sedExceptionCode.equalsIgnoreCase("KMI") || 
                                      sedExceptionCode.equalsIgnoreCase("LVS")) 
                                  {
                                        //sedEccnNumberTag = "<ECCNNumber>" + sedEccnNumber + "</ECCNNumber>";
                                  } 
                                  else 
                                  {
                                    //sedEccnNumberTag = "";
                                  }
                                  }
                                  catch(Exception e)
                                  {
                                    logger.info("error in getting soldTo details");
                                  }
                                  ListIterator CoInfoIterator = coList.listIterator();
                                  logger.info("coList size  :: "+coList.size());
                                  CommodityContent commodityConents[]=new CommodityContent[coList.size()];
                                  //Getting the flags for Commercial Invoice,US certificate of Origin,NAFTA certificate of origin , 
                                  //SED (Shipper's Export Declareation)
                                  ciFlag = aascIntlHeaderInfo.getCommercialInv();
                                  logger.info("********ciFlag**********" + ciFlag);
                                  naftaFlag = aascIntlHeaderInfo.getNaftaCertOrigin();
                                  logger.info("********naftaFlag**********" + naftaFlag);
                                  uscoFlag = aascIntlHeaderInfo.getUsCertOrigin();
                                  logger.info("********uscoFlag**********" + uscoFlag);
                                  sedFlag = aascIntlHeaderInfo.getShippersExportDecl();
                                  logger.info("********sedFlag**********" + sedFlag);
                                  BigDecimal totalCustomsValue=new BigDecimal(invValue);
                                  logger.info("totalCustomsValue :: " +totalCustomsValue);
                                   packageObject.setDeclared_value_customs(totalCustomsValue);
                                  int CountOfCommodities=0;
                                  while(CoInfoIterator.hasNext())
                                  {
                                   
                                    AascIntlCommodityInfo aascIntlCommodityInfo = (AascIntlCommodityInfo)CoInfoIterator.next();
                                    
                                    ciNumber = encode(nullStrToSpc(aascIntlCommodityInfo.getQuantity()));
                                    ciUOM = encode(nullStrToSpc(aascIntlCommodityInfo.getQuantityUnits()));
                                    ciDesc = nullStrToSpc(aascIntlCommodityInfo.getDescription());
                                    ciPricePerUnit = encode(nullStrToSpc(aascIntlCommodityInfo.getUnitPrice()));
                                    prdTarrifCode = encode(nullStrToSpc(aascIntlCommodityInfo.getHarmonizedCode()));
                                    prdCountry = encode(nullStrToSpc(aascIntlCommodityInfo.getCountryOfManufacture()));
//                                      System.out.println("ciNumber:intl:"+ciNumber);
//                                      System.out.println(""+ciUOM);
//                                      System.out.println(""+ciDesc);
//                                      System.out.println(""+ciPricePerUnit);
//                                      System.out.println(""+prdTarrifCode);
//                                      System.out.println(""+prdCountry);
                                      
                                    try
                                    {
//                                      naftaNetCostCode = encode(nullStrToSpc(aascIntlCommodityInfo.getRvcCalculationMethod())); ///need to chk
//                                      naftaNetCostBeginDate = encode(nullStrToSpc(aascIntlCommodityInfo.getNetCostPeriodBeginDate()));
//                                      naftaNetCostEndDate = encode(nullStrToSpc(aascIntlCommodityInfo.getNetCostPeriodEndDate()));
//                                      naftaPreferenceCriteria = encode(nullStrToSpc(aascIntlCommodityInfo.getPreferenceCriteria()));
//                                      naftaProducerInfo = encode(nullStrToSpc(aascIntlCommodityInfo.getProducer()));
//                                      naftaCompanyName = nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerAddressInfo().getCompanyName());
//                                      naftaAddressLine1 = nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerAddressInfo().getAddressLine1());
//                                      naftaCity = nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerAddressInfo().getCity());
//                                      naftaStateProvinceCode = nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerAddressInfo().getStateProvinceCode());
//                                      naftaPostalCode = nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerAddressInfo().getPostalCode());
//                                      naftaCountryCode = nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerAddressInfo().getCountryCode());
//                                      naftaTaxId = nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerAddressInfo().getTaxId());
                                    }
                                    catch(Exception e)
                                    {
                                      logger.info("exception in getting NAFTA producer details");
                                    } 
//                                      naftaProducerValue = encode(nullStrToSpc(aascIntlHeaderInfo.getNaftaProducerValueInfo()));
//                                      uscoNumPkgPerCommodity = aascIntlCommodityInfo.getNumberOfPieces();
//                                      productUOM = aascIntlCommodityInfo.getPackageWeightUom(); //need to chk
//                                      productWeight = encode(nullStrToSpc(aascIntlCommodityInfo.getWeight()));
                                    
                                   
//                                    sedSchBNumber = encode(nullStrToSpc(aascIntlCommodityInfo.getScheduleBNumber()));
//                                    sedSchQuantity = encode(nullStrToSpc(aascIntlCommodityInfo.getScheduleBQty()));
//                                    sedSchUnitOfMeasurement = encode(nullStrToSpc(aascIntlCommodityInfo.getScheduleBUOM()));
//                                    sedExportType = encode(nullStrToSpc(aascIntlCommodityInfo.getExportType()));
//                                    sedTotalVal = aascIntlCommodityInfo.getSedTotalValue();
                                    CommodityContent commodityContent=new CommodityContent();
                                    intlDocSubType = nullStrToSpc(aascShipMethodInfo.getIntlDocSubTypeValue(carrierId));
                                    logger.info("intlDocSubType :" + intlDocSubType);
                                    logger.info("aascIntlHeaderInfo.getGenerateCI() :: "+aascIntlHeaderInfo.getGenerateCI());
                                    if ("Y".equalsIgnoreCase(ciFlag) || "Y".equalsIgnoreCase(aascIntlHeaderInfo.getGenerateCI())) 
                                    {
                                      if("Electronic".equalsIgnoreCase(intlDocSubType) || "Electronic And Paper".equalsIgnoreCase(intlDocSubType) ) 
                                      {
                                        request.setCommercial_invoice_method(1);
                                      }
                                      else
                                      {
                                        request.setCommercial_invoice_method(0);
                                      }
                                      logger.info("ciNumber :: Quantity :: "+ciNumber);
                                      commodityContent.setQuantity(Long.valueOf(ciNumber).longValue());
                                      logger.info("commodityContent.getQuantity()::::"+commodityContent.getQuantity()+":::::::");
                                      if("KGS".equalsIgnoreCase(ciUOM))
                                      {
                                        ciUOM="KG";
                                      }
                                      logger.info("ciUOM :: Unit of Measurement :: "+ciUOM);
                                      commodityContent.setQuantity_unit_measure(ciUOM);
                                      //Also Mandatory for NAFTA
                                      logger.info("ciPricePerUnit :: unit_value :: "+ciPricePerUnit);
                                      commodityContent.setUnit_value(new BigDecimal(ciPricePerUnit));
                                      
                                      logger.info("prdCountry :: origin_country ::"+prdCountry);
                                      commodityContent.setOrigin_country(prdCountry);
                                      
                                      logger.info("prdTarrifCode :: harmonized_code :: "+prdTarrifCode);
                                      commodityContent.setHarmonized_code(prdTarrifCode);
                                      
                                    
                                      
                                      
                                      request.setComments(ciComments);
                                      logger.info("ciTermsOfShipment::"+ciTermsOfShipment);
                                      request.setTerms_of_sale(ciTermsOfShipment); //Gururaj added code for setting the terms in the internation pop -up.
                                      logger.info("ciReasonForExport::"+ciReasonForExport); 
                                      request.setExport_reason(ciReasonForExport);//Gururaj added code for setting the Reason For Export in the internation pop -up.
                                      
                                       //For commercial invoice discount
                                      logger.info("ciDiscount::"+ciDiscount);
                                      BigDecimal commercialInvoiceDiscount=new BigDecimal(ciDiscount); 
                                      logger.info("commercialInvoiceDiscount"+commercialInvoiceDiscount);
                                      request.setInvoice_discount(commercialInvoiceDiscount);
                                      //commercial invoice discount End
                                      
                                       //For commercial invoice FreightCharges
                                      logger.info("ciFreightCharges::"+ciFreightCharges);
                                      BigDecimal commercialInvoiceFreightCharges=new BigDecimal(ciFreightCharges); 
                                      logger.info("commercialInvoiceFreightCharges"+commercialInvoiceFreightCharges);
                                      request.setInvoice_freight(commercialInvoiceFreightCharges);
                                      //commercial invoice FreightCharges End
                                      
                                       //For commercial invoice Insurance Charges
                                      logger.info("ciInsuranceCharges::"+ciInsuranceCharges);
                                      BigDecimal commercialInvoiceInsuranceCharges=new BigDecimal(ciInsuranceCharges); 
                                      logger.info("commercialInvoiceFreightCharges"+commercialInvoiceInsuranceCharges);
                                  
                                      packageObject.setInvoice_insurance_fee(commercialInvoiceInsuranceCharges);
                                      //commercial invoice Insurance Charges End
                                      
                                       //For commercial invoice Other Charges
                                      logger.info("ciOtherCharges"+ciOtherCharges);
                                      BigDecimal commercialInvoiceOtherCharges=new BigDecimal(ciOtherCharges); 
                                      logger.info("commercialInvoiceFreightCharges"+commercialInvoiceOtherCharges);
                                      packageObject.setInvoice_other_fee(commercialInvoiceOtherCharges);
                                      //commercial invoice Other Charges End
                                      
                                       
                                     
                                      // Setting the soldTo details information
                                      logger.info("soldCompanyName :: "+soldCompanyName+
                                                  "\n soldToAttention :: "+soldToAttention+
                                                   "\n soldAddressLine1 :: "+soldAddressLine1+
                                                   "\n soldAddressLine2 :: "+soldAddressLine2+
                                                   "\n soldCity :: "+soldCity+
                                                   "\n soldStProvinceCd ::"+soldStProvinceCd+
                                                   "\n soldPostalCd ::"+soldPostalCd+
                                                    "\n soldCountryCd ::"+soldCountryCd+
                                                   "\n soldTaxId ::"+soldTaxId+"\n");   
                                      NameAddress soldToDetailsInformation=new NameAddress();
                                      soldToDetailsInformation.setCompany(soldCompanyName);
                                      soldToDetailsInformation.setContact(soldToAttention);
                                      soldToDetailsInformation.setAddress1(soldAddressLine1);
                                      soldToDetailsInformation.setAddress2(soldAddressLine2);
                                      soldToDetailsInformation.setCity(soldCity);
                                      soldToDetailsInformation.setState_province(soldStProvinceCd);
                                      soldToDetailsInformation.setPostal_code(soldPostalCd);
                                      soldToDetailsInformation.setCountry_ISO2(soldCountryCd);
//                                      soldToDetailsInformation.setCountry_symbol(soldCountryCd);
                                      soldToDetailsInformation.setPhone(soldToPhone);
                                      request.setImporter_of_record(soldToDetailsInformation); //Setting the soldTo information to request object
                                      request.setImporter_of_record_tax_id(soldTaxId);
                                    }//end of if(ciFlag.equalsIgnoreCase("Y"))
                                    
                                    // setting the variable for NAFTA certificate of origin
                                    if ("Y".equalsIgnoreCase(naftaFlag)) 
                                    { 
                                      logger.info("Inside if of NAFTA certificate");
//                                      
//                                        //Mandatory for NAFTA
//                                        logger.info("aascIntlCommodityInfo.getUnitWeight() :: "+aascIntlCommodityInfo.getUnitPrice());
//                                        String unitWeight=encode(nullStrToSpc(aascIntlCommodityInfo.getUnitPrice()));
//                                        commodityContent.setUnit_weight(new BigDecimal(unitWeight));
//                                        logger.info("commodityContent.getUnit_value()"+commodityContent.getUnit_value());
//                                        
//                                      if("Electronic".equalsIgnoreCase(intlDocSubType) || "Electronic And Paper".equalsIgnoreCase(intlDocSubType)) 
//                                      {
//                                        request.setCommercial_invoice_method(1);
//                                        request.setCert_of_origin_method(5);
//                                      }
//                                      else
//                                      {
//                                        request.setCommercial_invoice_method(0);
//                                        request.setCert_of_origin_method(3);
//                                      }
//                                      
//                                      // For date
//                                       // NAFTA RVC calculation method
//                                      logger.info("naftaNetCostCode:::::::"+naftaNetCostCode+":::::");
//                                      if("NO".equalsIgnoreCase(naftaNetCostCode))
//                                      {
//                                        commodityContent.setNafta_rvc_method(1);
//                                      }
//                                      if("NC".equalsIgnoreCase(naftaNetCostCode))
//                                      {
//                                         commodityContent.setNafta_rvc_method(2);
//
//                                      }
//                                      if(!"".equalsIgnoreCase(naftaNetCostBeginDate)&&!"".equalsIgnoreCase(naftaNetCostEndDate))
//                                      {
//                                        logger.info("naftaNetCostBeginDate Date :: "+naftaNetCostBeginDate);
//                                        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
//                                        Calendar BeginDateCal  = Calendar.getInstance();
//                                        BeginDateCal.setTime(df.parse(naftaNetCostBeginDate));
//                                        BeginDateCal.set(BeginDateCal.HOUR_OF_DAY,23);
//                                        BeginDateCal.set(BeginDateCal.MINUTE,59);
//                                        BeginDateCal.set(BeginDateCal.SECOND,59);
//                                        commodityContent.setNafta_rvc_avg_start_date(new SimpleDateFormat("yyyy-MM-dd").format(BeginDateCal));
//                                          commodityContent.setNafta_rvc_avg_start_date(naftaNetCostBeginDate);
//
//                                        
//                                        logger.info("naftaNetCostEndDate Date :: "+naftaNetCostEndDate);
//                                        SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
//                                        Calendar EndDateCal  = Calendar.getInstance();
//                                        EndDateCal.setTime(df1.parse(naftaNetCostEndDate));
//                                        EndDateCal.set(EndDateCal.HOUR_OF_DAY,23);
//                                        EndDateCal.set(EndDateCal.MINUTE,59);
//                                        EndDateCal.set(EndDateCal.SECOND,59);
//                                        commodityContent.setNafta_rvc_avg_end_date(new SimpleDateFormat("yyyy-MM-dd").format(EndDateCal));
//                                          commodityContent.setNafta_rvc_avg_end_date(naftaNetCostEndDate);
//
//                                      }
//                                   
//  
//                                      //date
//                                      // For NAFTA preference criteria
//                                      logger.info("naftaPreferenceCriteria ::"+naftaPreferenceCriteria+"::::");
//                                      if("A".equalsIgnoreCase(naftaPreferenceCriteria))
//                                      {
//                                        commodityContent.setNafta_preference_criterion(1);  
//                                      }
//                                      if("B".equalsIgnoreCase(naftaPreferenceCriteria))
//                                      {
//                                        commodityContent.setNafta_preference_criterion(2);  
//                                      }
//                                      if("C".equalsIgnoreCase(naftaPreferenceCriteria))
//                                      {
//                                        commodityContent.setNafta_preference_criterion(3);  
//                                      }
//                                      if("D".equalsIgnoreCase(naftaPreferenceCriteria))
//                                      {
//                                        commodityContent.setNafta_preference_criterion(4);  
//                                      }
//                                      if("E".equalsIgnoreCase(naftaPreferenceCriteria))
//                                      {
//                                        commodityContent.setNafta_preference_criterion(5);  
//                                      }
//                                      if("F".equalsIgnoreCase(naftaPreferenceCriteria))
//                                      {
//                                        commodityContent.setNafta_preference_criterion(6);  
//                                      } 
//                                      // Preference criteria end
//                                      // for NAFTA producer
//                                      logger.info("naftaProducerInfo::"+naftaProducerInfo+"::::");
//                                      logger.info("naftaProducerValue::"+naftaProducerValue+"::::");
//                                       
//                                      /*
//                                       * NAFTA producer validations to be set to sent to ShipExec
//                                       * 1 = Yes
//                                       * 2 = No[1]
//                                       * 3 = No[2]
//                                       * 4 = No[3]
//                                       * 
//                                       */
//                                       if("Yes".equalsIgnoreCase(naftaProducerInfo))
//                                       {
//                                         commodityContent.setNafta_producer(1);
//                                       }
//                                       if("No[1]".equalsIgnoreCase(naftaProducerInfo))
//                                       {
//                                         commodityContent.setNafta_producer(2);
//                                       }
//                                      if("No[2]".equalsIgnoreCase(naftaProducerInfo))
//                                      {
//                                        commodityContent.setNafta_producer(3);
//                                      }
//                                      if("No[3]".equalsIgnoreCase(naftaProducerInfo))
//                                      {
//                                        commodityContent.setNafta_producer(4);
//                                      }
//                                      //NAFTA producer end
//                                      //NAFTA producer details  
//                                       logger.info("naftaCompanyName :: "+naftaCompanyName+
//                                                   "\n naftaAddressLine1 :: "+naftaAddressLine1+
//                                                    "\n naftaCity :: "+naftaCity+
//                                                    "\n naftaStateProvinceCode :: "+naftaStateProvinceCode+
//                                                    "\n naftaPostalCode :: "+naftaPostalCode+
//                                                    "\n naftaCountryCode ::"+naftaCountryCode+
//                                                    "\n naftaTaxId ::"+naftaTaxId+"\n");
//                                      if( !"".equalsIgnoreCase(naftaCompanyName) )
//                                      {
//                                       NameAddress originAddress=new NameAddress();
//                                      originAddress.setCompany(naftaCompanyName);
//                                      originAddress.setAddress1(naftaAddressLine1);
//                                      originAddress.setCity(naftaCity);
//                                      originAddress.setState_province(naftaStateProvinceCode);
//                                      originAddress.setPostal_code(naftaPostalCode);
//                                      originAddress.setCountry_ISO2(naftaCountryCode);
//                                      originAddress.setCountry_symbol(naftaCountryCode);
//                                      commodityContent.setOrigin(originAddress);
//                                      commodityContent.setOrigin_tax_id(naftaTaxId);
//                                    }
//                                    else
//                                    {
//                                      //put ship from details
//                                      if("04".equalsIgnoreCase(naftaProducerValue))
//                                      {
//                                         logger.info("Inside else \n shipFromAddressLine1 :: "+shipFromAddressLine1+
//                                                     "\n shipFromAddressLine2 :: "+shipFromAddressLine2+
//                                                      "\n shipFromAddressCity :: "+shipFromAddressCity+
//                                                      "\n shipFromAddressState :: "+shipFromAddressState+
//                                                      "\n shipFromAddressPostalCode :: "+shipFromAddressPostalCode+
//                                                      "\n shipFromCountry ::"+shipFromCountry+
//                                                      "\n shipFromCompanyName ::"+shipFromCompanyName+
//                                                      "\n shipFromPhoneNumber ::"+shipFromPhoneNumber+
//                                                      "\n shipFromTaxId ::"+shipFromTaxId+"\n");
//                                         NameAddress originAddress=new NameAddress();
//                                         originAddress.setCompany(shipFromCompanyName);
//                                         originAddress.setAddress1(shipFromAddressLine1);
//                                        originAddress.setAddress2(shipFromAddressLine2);
//                                         originAddress.setCity(shipFromAddressCity);
//                                         originAddress.setState_province(shipFromAddressState);
//                                         originAddress.setPostal_code(shipFromAddressPostalCode);
//                                         originAddress.setCountry_ISO2(shipFromCountry);
//                                         originAddress.setCountry_symbol(shipFromCountry);
//                                         originAddress.setPhone(shipFromPhoneNumber);
//                                         commodityContent.setOrigin(originAddress);
//                                         commodityContent.setOrigin_tax_id(shipFromTaxId);
//                                      }  
//                                      
//                                    }
//                                    logger.info("naftaProducerValue :: "+naftaProducerValue);
//                                    if("01".equalsIgnoreCase(naftaProducerValue))
//                                    {
//                                      //Make address available to customs upon request
//                                      request.setMisc_reference_3("Make address available to customs upon request");
//                                    }
//                                    else if("02".equalsIgnoreCase(naftaProducerValue))
//                                    {
//                                      //Make address available to customs upon request
//                                      request.setMisc_reference_3("Complete online for a single producer");
//                                    }
//                                    else if("03".equalsIgnoreCase(naftaProducerValue))
//                                    {
//                                      //Make address available to customs upon request
//                                      request.setMisc_reference_3("Attach a List");
//                                    }
//                                    else
//                                    {
//                                      //Make address available to customs upon request
//                                      request.setMisc_reference_3("Enter Producer details");
//                                    }
                                       //NAFTA producer details details end
                                    }
                                    //Sending blanket period Details
                                    logger.info("Blanket BeginDate ::"+BeginDate);
                                    if(!"".equalsIgnoreCase(BeginDate))
                                    {
                                      try
                                      {
                                        logger.info("Blanket BeginDate ::"+BeginDate);
                                        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                                        Calendar BeginDateCal  = Calendar.getInstance();
                                        BeginDateCal.setTime(df.parse(BeginDate));
                                        logger.info("Blanket after BeginDate ::"+BeginDate);
                                        request.setMisc_reference_4(BeginDate);
                                      }
                                      catch(Exception e)
                                      {
                                        logger.info("Exception in parsing BeginDate");
                                      }
                                    }
  
                                    if(!"".equalsIgnoreCase(EndDate)) 
                                    {
                                        logger.info("Blanket EndDate :: "+EndDate);
                                        SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
                                        Calendar EndDateCal  = Calendar.getInstance();
                                        EndDateCal.setTime(df1.parse(EndDate));
                                      logger.info("Blanket after EndDate :: "+EndDate);
                                        request.setMisc_reference_5(EndDate);
                                    }    

                                    
                                    
                                    //blanket period Details End
                                    
                                    // END NAFTA cerficate for international shipping
                                    
                                    // Setting the contents for US certificate of origin
                                    if("Y".equalsIgnoreCase(uscoFlag))
                                    {
                                      logger.info("Inside if of USCO certificate");
//                                      if("Electronic".equalsIgnoreCase(intlDocSubType) || "Electronic And Paper".equalsIgnoreCase(intlDocSubType)) 
//                                      {
//                                        request.setCommercial_invoice_method(1);
//                                        request.setCert_of_origin_method(1);
//                                      }
//                                      else
//                                      {
//                                        request.setCommercial_invoice_method(0);
//                                        request.setCert_of_origin_method(1);
//                                      }
//                                      logger.info("productWeightUSCO::::"+productWeight);
//                                      java.math.BigDecimal productWeightUSCO=new java.math.BigDecimal(productWeight);
//                                      commodityContent.setUnit_weight(productWeightUSCO);
//                                      logger.info("productUOM:::::"+productUOM+":::::");
//                                      if("KGS".equalsIgnoreCase(productUOM))
//                                      {
//                                        productUOM="KG";
//                                      }
//                                      if("LBS".equalsIgnoreCase(productUOM))
//                                      {
//                                        productUOM="LB";
//                                      }
//                                      commodityContent.setUnit_weight_unit(productUOM);
//                                      
//                                      logger.info("aascIntlCommodityInfo.getUnitWeight() :: "+aascIntlCommodityInfo.getUnitPrice());
//                                      String unitWeight=encode(nullStrToSpc(aascIntlCommodityInfo.getUnitPrice()));
//                                      commodityContent.setUnit_weight(new BigDecimal(unitWeight));
//                                      logger.info("commodityContent.getUnit_value()"+commodityContent.getUnit_value());
//                                      
                                    }
                                    // END USCO
//                                     logger.info("aascIntlHeaderInfo.getIntlITNNumber() :::::::::"+aascIntlHeaderInfo.getIntlITNNumber());
//                                     IntlITNNumber = nullStrToSpc(aascIntlHeaderInfo.getIntlITNNumber());
//                                     aesFlag=nullStrToSpc(aascIntlCommodityInfo.getAesRequired());
                                    if("Y".equalsIgnoreCase(aesFlag))
                                    {
                                      
//                                      request.setSed_method(2);
//                                      request.setAes_transaction_number(IntlITNNumber);
//                                      exportCode=nullStrToSpc(aascIntlCommodityInfo.getAascAESInfo().getExportCode());
//                                      logger.info("exportCode :::::::::"+exportCode);
//                                      commodityContent.setExport_information_code(exportCode);
//                                      java.math.BigDecimal productWeightUSCO=new java.math.BigDecimal(productWeight);
//                                      commodityContent.setUnit_weight(productWeightUSCO);
//                                      logger.info("productUOM:::::"+productUOM+":::::");
//                                      if("KGS".equalsIgnoreCase(productUOM))
//                                      {
//                                        productUOM="KG";
//                                      }
//                                      if("LBS".equalsIgnoreCase(productUOM))
//                                      {
//                                        productUOM="LB";
//                                      }
//                                      commodityContent.setUnit_weight_unit(productUOM);
//                                     logger.info("aascIntlCommodityInfo.getUnitWeight() :: "+aascIntlCommodityInfo.getUnitPrice());
//                                     String unitWeight=encode(nullStrToSpc(aascIntlCommodityInfo.getUnitPrice()));
//                                     commodityContent.setUnit_weight(new BigDecimal(unitWeight));
//                                     logger.info("commodityContent.getUnit_value()"+commodityContent.getUnit_value());
                                    }
                                    else
                                    { 
                                      if(!"".equalsIgnoreCase(IntlITNNumber))
                                      {
//                                        request.setSed_method(2);
//                                        request.setAes_transaction_number(IntlITNNumber);
//                                        java.math.BigDecimal productWeightUSCO=new java.math.BigDecimal(productWeight);
//                                        commodityContent.setUnit_weight(productWeightUSCO);
//                                        logger.info("productUOM:::::"+productUOM+":::::");
//                                        if("KGS".equalsIgnoreCase(productUOM))
//                                        {
//                                          productUOM="KG";
//                                        }
//                                        if("LBS".equalsIgnoreCase(productUOM))
//                                        {
//                                          productUOM="LB";
//                                        }
//                                        commodityContent.setUnit_weight_unit(productUOM);
//                                           logger.info("aascIntlCommodityInfo.getUnitWeight() :: "+aascIntlCommodityInfo.getUnitPrice());
//                                           String unitWeight=encode(nullStrToSpc(aascIntlCommodityInfo.getUnitPrice()));
//                                           commodityContent.setUnit_weight(new BigDecimal(unitWeight));
//                                           logger.info("commodityContent.getUnit_value()"+commodityContent.getUnit_value());
                                      }
                                    }
                                    
                                    // Setting the description for all international shipments
                                     if (ciDesc.length() > 35) 
                                     {
                                           ciDesc1 = ciDesc.substring(0,35);
                                           ciDesc2 = ciDesc.substring(35);
                                           if (ciDesc2.length() > 35) 
                                           {
                                             ciDesc3 = ciDesc2.substring(35);
                                             ciDesc2 = ciDesc2.substring(0,35);
                                             if (ciDesc3.length() > 35) 
                                             {
                                               ciDesc3 = ciDesc3.substring(0,35);
                                             }
                                           }
                                     }
                                    else 
                                    {
                                      ciDesc1 = ciDesc;
                                    }
                                    StringBuffer commodityDescription=new StringBuffer();
                                    if (ciDesc1 != null)
                                    {
                                      commodityDescription.append(ciDesc1);
                                    }
                                    if (ciDesc2 != null)
                                    {
                                      commodityDescription.append(ciDesc2);
                                    }
                                    if (ciDesc3 != null)
                                    {
                                      commodityDescription.append(ciDesc3);
                                    }
                                    commodityContent.setDescription(commodityDescription.toString());
                                    logger.info("commodityContent.getDescription()::"+commodityContent.getDescription()+"::");
                                    commodityConents[CountOfCommodities]=commodityContent;
                                    //End setting description for each and every commodity
                                    // Setting the description of Shipment ie., the first commodity for shipping
                                    if(CountOfCommodities==0 && carrierCode!=999) // vikas added code to fix issue #3214
                                    {
                                      request.setDescription(commodityDescription.toString());
                                      shipmentDespcription=request.getDescription();
                                      logger.info("shipmentDespcription:::"+shipmentDespcription+":::::");
                                    }  
                                    CountOfCommodities++;
                                    
                                  }//End of while
                                  logger.info("shipFromTaxId :: "+shipFromTaxId +"\nshipToTaxId :: "+shipToTaxId);
                                   request.setExporter_tax_id(shipFromTaxId);
                                   
                                   request.setConsignee_customs_id(shipToTaxId);
                                  request.setCommodity_contents(commodityConents);// Adding the commodities fo the PackageRequest Object
                                  
//                                  logger.info("DocumentsOnly :: "+aascIntlInfo.getIntlHeaderInfo().getDocumentsOnly());
//                                  String documentsOnlyStr = nullStrToSpc(aascIntlInfo.getIntlHeaderInfo().getDocumentsOnly());
//                                        if("Y".equalsIgnoreCase(documentsOnlyStr)) {
//                                          packageObject.setDocuments_only(true);
//                                      }
//                                      else {
//                                          packageObject.setDocuments_only(false);
//                                      }
                                   
                                 //  packageObject.setDocuments_only(aascIntlInfo.getIntlHeaderInfo().getDocumentsOnly());
                                 
                              }
                            }
                        }
                        catch(Exception e) 
                        {
                            logger.info("Data is not entered in the International Shipments window"+e.getMessage());
                            logger.severe("Exception::"+e.getMessage());
                        }
                        logger.info("Count ::: "+count);
//                      count = numPackages;
                        logger.info("Count ::1: "+count);
                      if(count!=0 && carrierCode!=999 )
                      {
                        request.setDescription(shipmentDespcription);
                          logger.info("soldCompanyName :: "+soldCompanyName+
                                      "\n soldToAttention :: "+soldToAttention+
                                       "\n soldAddressLine1 :: "+soldAddressLine1+
                                       "\n soldAddressLine2 :: "+soldAddressLine2+
                                       "\n soldCity :: "+soldCity+
                                       "\n soldStProvinceCd ::"+soldStProvinceCd+
                                       "\n soldPostalCd ::"+soldPostalCd+
                                        "\n soldCountryCd ::"+soldCountryCd+
                                       "\n soldTaxId ::"+soldTaxId+"\n");   

                          NameAddress soldToDetailsInformation=new NameAddress();
                          soldToDetailsInformation.setCompany(soldCompanyName);
                          soldToDetailsInformation.setContact(soldToAttention);
                          soldToDetailsInformation.setAddress1(soldAddressLine1);
                          soldToDetailsInformation.setAddress2(soldAddressLine2);
                          soldToDetailsInformation.setCity(soldCity);
                          soldToDetailsInformation.setState_province(soldStProvinceCd);
                          soldToDetailsInformation.setPostal_code(soldPostalCd);
                          soldToDetailsInformation.setCountry_ISO2(soldCountryCd);
//                          soldToDetailsInformation.setCountry_symbol(soldCountryCd);
                          soldToDetailsInformation.setPhone(soldToPhone);
                          //Setting the soldTo information to request for the second an third package object
                          request.setImporter_of_record(soldToDetailsInformation); 
                          request.setImporter_of_record_tax_id(soldTaxId);
                        logger.info("shipmentDespcription 1:::"+shipmentDespcription+":::::");
                      }
                        packageRequestObject[count]=request;
                        count++; //SC_7.0_LB
                        logger.info("-----------------------------------------------------------------------------"+count);
                    }
                 }
               
                PrintRequest printRequest=new PrintRequest();
                printRequest.setPrintProfile_id(1);
//                printRequest.setMachineName("");
                printRequest.setConfigurationName("");
                
                shipmentRequestObject.setDef_attr(packageObject);
                shipmentRequestObject.setPackages(packageRequestObject);
                shipmentRequestObject.setPrintRequest(printRequest);
                shipmentRequestObject.setManualShipment(false);
                shipmentRequestObject.setAllowEdit(false);

        
                SoxDictionaryItem sox[]=new SoxDictionaryItem[1];
                SoxDictionaryItem soxDictionaryItem =new SoxDictionaryItem();
                soxDictionaryItem.setKey(shipperName);//put shipper name
                soxDictionaryItem.setValue(shipperName);
                sox[0]=soxDictionaryItem;
                try
                {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                XMLEncoder xmlEncoder = new XMLEncoder(baos);
                PersistenceDelegate pd = xmlEncoder.getPersistenceDelegate(Integer.class); 
                xmlEncoder.setPersistenceDelegate(BigDecimal.class, pd);
                xmlEncoder.writeObject(shipmentRequestObject);
                xmlEncoder.close();
                String xml = baos.toString();
//                System.out.println("--------------------------------------------------------\n"+xml);
                OutputStream outputStream = new FileOutputStream (labelpath +deliveryName + 
                                        "_ShipExec_" + timeStampStr + 
                                        "_request.xml"); 
                baos.writeTo(outputStream);
                }
                catch(Exception e) {
                    e.printStackTrace();
                }
                ShipResponse ship_resp=shipExecClient.ship(shipmentRequestObject,false,sox);           
//                parsedStatus = parseResponse(ship_resp, aascShipmentOrderInfo);
logger.info("labelpath::1::"+labelpath);
                
                aascShipExecShipmentInfo = new AascShipExecShipmentInfo();
//                ship.proxy.types.psi.wcf.ShipResponse shipResponse = null;
                parsedStatus = aascShipExecShipmentInfo.parseResponse(ship_resp, aascShipmentOrderInfo,aascShipMethodInfo,labelpath);
                logger.info("parsedStatus:" + parsedStatus);
                
                if (parsedStatus.equalsIgnoreCase("success")) {
                responseStatus = 150;
                } else {
                aascHeaderInfo.setMainError(parsedStatus);
                responseStatus = 151;
                }
                //FOr return shipment
                Iterator iterator=linkedList.listIterator();
                int counter=0;
                while(iterator.hasNext())
                {
                  aascPackageBean=(AascShipmentPackageInfo)iterator.next();
                  String returnShipment=aascPackageBean.getReturnShipment();
                  String packTrackinNumber = aascPackageBean.getTrackingNumber();
                  logger.info("returnShipment :: "+returnShipment);
                  counter++;
                  if(responseStatus == 150 && returnShipment.equalsIgnoreCase("PRINTRETURNLABEL"))
                  {
                    int responseStatusTemp=0;
                    if(responseStatus == 150)
                    {
                      responseStatus=sendReturnShipmentRequest(aascShipmentOrderInfo,aascShipMethodInfo,aascPackageBean,aascProfileOptionsInfo,labelpath);
                      responseStatusTemp=responseStatus;
                    }
                    if(responseStatusTemp != 150)
                    {
                      AascShipExecVoidShipment aascShipExecVoidShipment=new AascShipExecVoidShipment();
                      responseStatus=aascShipExecVoidShipment.voidShipment(aascShipmentOrderInfo,aascProfileOptionsInfo,aascShipMethodInfo,cloudLabelPath,packTrackinNumber,"");
                      int indexVoid=0;
                      LinkedList packageListVoid=aascShipmentOrderInfo.getShipmentPackageInfo();
                      Iterator it=packageListVoid.iterator();
                      while(it.hasNext()){
                          AascShipmentPackageInfo aascPackageInfoTemp=(AascShipmentPackageInfo)it.next();
                          aascPackageInfoTemp.setPkgCost(0.0);
                          aascPackageInfoTemp.setSurCharges(0.0);
                          aascPackageInfoTemp.setTrackingNumber("");
                          packageListVoid.set(indexVoid,aascPackageInfoTemp);
                          indexVoid++;
                      }
                      aascShipmentOrderInfo.setShipmentPackageInfo(packageListVoid);
                      aascShipmentOrderInfo.getShipmentHeaderInfo().setShipmentCost(0.0);
                      aascShipmentOrderInfo.getShipmentHeaderInfo().setFreightCost(0.0);
                      aascShipmentOrderInfo.getShipmentHeaderInfo().setWayBill("");
                      break;
                    }
                  }
                  
                }
            }
            else 
            {
                logger.severe("aascShipmentOrderInfo is null OR aascHeaderInfo is null OR linkedList is null OR aascShipMethodInfo is null");
                aascHeaderInfo.setMainError("\n aascShipmentOrderInfo is null OR" + 
                                            "\n aascHeaderInfo is null OR" + 
                                            "\n linkedList is null OR" + 
                                            "\n aascShipMethodInfo is null");
                responseStatus = 151;
            }
        }
        catch(Exception e) {
            responseStatus = 151;
            aascHeaderInfo.setMainError("Exception: " + e.getMessage());
            logger.severe("Exception::"+e.getMessage());
        }
        finally 
        {
            try 
            {
//                connection.disconnect();
            } 
            catch (Exception ex) 
            {
                        ex.printStackTrace();
            }

        }
  
//        return 151;
      return responseStatus;
    } //End of method    
    
     /** creates a return shipment by using the WSDL client, the files generated by consuming the WSDL. Here the requests and responses are not saved but 
      * everything is object setting.
      * @param aascShipmentOrderInfo aascShipmentOrderInfo Object to get the Delivery Information
      * @param aascShipMethodInfo AascShipMethodInfo Object to get the ShipMethod Information
      * @param aascPackageInfo AascPackageInfo Object to get the package details
      * @return Returns the int value , if 150 the response is success otherwise 
      * if int value is 151 then there is an error in the response file.
      * 
      * */
    
     public int sendReturnShipmentRequest(AascShipmentOrderInfo aascShipmentOrderInfo, 
                                     AascShipMethodInfo aascShipMethodInfo, 
                                     AascShipmentPackageInfo aascPackageBean  ,AascProfileOptionsBean aascProfileOptionsInfo,String labelpath)
     {
        String returnShipFromCompanyName = null; 
        String returnShipFromContact=null;
        String returnShipFromAddressLine1 = null;
        String returnShipFromAddressLine2 = null;
        String returnShipFromAddressCity = null;
        String returnShipFromAddressState = null;
        String returnShipFromAddressPostalCode = null;
        String returnShipFromAddressPhone1 = null;
        String  returnShipFromCountrySymbol   = null;
        String returnDescription = null;
      
        String returnPayMethod="";
        String returnPayMethodCode ="";
      
                            
        String returnAccountNumber="";
        String declaredCurrencyCode = "";
        String additionalHandlingFlag="";  
        double declaredVal=0.0;
        float pkgWtVal;
        String pkgWtUom = "";
        String dimensionValue = "";
        String packaging= "";
        String packageDimensionUnits = "";
        String carrierPayMethodCode="";
        String shipperTerm="";
        String reference1="";
        String reference2="";
        
       try
       {
          aascHeaderInfo = aascShipmentOrderInfo.getShipmentHeaderInfo();
          linkedList = aascShipmentOrderInfo.getShipmentPackageInfo();
          //getting return ship from details
          returnShipFromCompanyName       = nullStrToSpc(aascPackageBean.getRtnShipFromCompany());
          returnShipFromAddressLine1      = nullStrToSpc(aascPackageBean.getRtnShipFromLine1()); 
          returnShipFromAddressLine2      = nullStrToSpc(aascPackageBean.getRtnShipFromLine2()); 
          returnShipFromAddressCity       = encode(nullStrToSpc(aascPackageBean.getRtnShipFromCity())); 
          returnShipFromAddressPostalCode = nullStrToSpc(aascPackageBean.getRtnShipFromZip()); 
          returnShipFromCountrySymbol     = encode(nullStrToSpc(aascPackageBean.getRtnCountrySymbol())); 
          returnShipFromAddressState      = encode(nullStrToSpc(aascPackageBean.getRtnShipFromSate()));
          returnShipFromAddressPhone1 = nullStrToSpc(aascPackageBean.getRtnShipFromPhone());
          returnShipFromContact=nullStrToSpc(aascPackageBean.getRtnShipFromContact());
          reference1              = encode(nullStrToSpc(aascHeaderInfo.getReference1())); 
          reference2              = encode(nullStrToSpc(aascHeaderInfo.getReference2()));
          returnDescription = nullStrToSpc(aascPackageBean.getRtnDesc());
         // System.out.println("returnDescription:1:"+returnDescription);
          returnPayMethod =aascPackageBean.getRtnPayMethod();
          returnPayMethodCode = aascPackageBean.getRtnPayMethodCode();
          returnAccountNumber=aascPackageBean.getRtnACNumber();
          carrierPayMethodCode    = nullStrToSpc(aascShipMethodInfo.getCarrierPayCode(returnPayMethod)); 
          
          shipperTerm             = nullStrToSpc(aascShipMethodInfo.getCsCarrierPayTerm(carrierPayMethodCode));    
          
           
         shipDate                = aascHeaderInfo.getShipmentDate(); 
         shipperName             = nullStrToSpc(aascHeaderInfo.getShipExecShipperName()); 
            
//       System.out.println("returnShipFromCompanyName::"+returnShipFromCompanyName);
//           System.out.println("returnShipFromAddressLine1::"+returnShipFromAddressLine1);
//           System.out.println("returnShipFromAddressLine2::"+returnShipFromAddressLine2);
//           System.out.println("returnShipFromAddressCity::"+returnShipFromAddressCity);
//           System.out.println("returnShipFromCountrySymbol::"+returnShipFromCountrySymbol);
//           System.out.println("returnShipFromAddressPostalCode::"+returnShipFromAddressPostalCode);
//           System.out.println("returnShipFromAddressState::"+returnShipFromAddressState);
//           System.out.println("returnShipFromAddressPhone1::"+returnShipFromAddressPhone1);
//           System.out.println("returnShipFromContact::"+returnShipFromContact);
//           System.out.println("reference1::"+reference1);
//           System.out.println("reference2::"+reference2);
//           System.out.println("returnDescription:sop::"+returnDescription);
//           System.out.println("returnPayMethod::"+returnPayMethod);
//           System.out.println("returnPayMethodCode::"+returnPayMethodCode);
//           System.out.println("returnAccountNumber::"+returnAccountNumber);
//           System.out.println("shipperTerm::"+shipperTerm);
//           System.out.println("carrierPayMethodCode::"+carrierPayMethodCode);
//           System.out.println("shipDate::"+shipDate);
//           System.out.println("shipperName::"+shipperName);
              
         String Shipmethod =aascPackageBean.getRtnShipMethod();
//         logger.info("return ajax service level code"+aascPackageBean.getRtnajaxUpsServiceLevelCode());
         
//         logger.info("Shipmethod in return shipment :::::::"+Shipmethod+"::::::::::::");
         connectshipSCS=nullStrToSpc(aascShipMethodInfo.getConnectShipScsTag(Shipmethod));
//         logger.info("connectshipSCS in AascshipExecShipment ::::"+connectshipSCS+":::::::::");
//         connectshipSCS = nullStrToSpc(aascShipMethodInfo.getShipExecScsTag(Shipmethod));
           
//         System.out.println("connectshipSCS::"+connectshipSCS+":::::::::");
//         To replece the value from TANDATA_UPS.UPS. to CONNECTSHIP_UPS.UPS.
//         connectshipSCS=connectshipSCS.replaceAll("TANDATA","CONNECTSHIP");
         logger.info("connectshipSCS after replace:: "+connectshipSCS);    
         try
         {
             //Removing charecter 'W' from the shipMethod as ShipExec will not accept 'W' 
             //for Example CONNECTSHIP_UPS.UPS.WEXP and accepts only CONNECTSHIP_UPS.UPS.EXP
             if(carrierCode!=999 && carrierCode!=114)
             {
             connectshipSCS=connectshipSCS.replaceAll("W","");
             }
             logger.info("connectshipSCS after replace for internaional shipping:: "+connectshipSCS); 
         }
         catch(Exception e) 
         {
             logger.info("connectshipSCS in catch block:: "+connectshipSCS);    
         }      
         logger.info("returnShipFromCompanyName :: "+returnShipFromCompanyName
         +"\nreturnShipFromContact :: "+returnShipFromContact
         +"\nreturnShipFromAddressLine1 :: "+returnShipFromAddressLine1
         +"\nreturnShipFromAddressLine2 :: "+returnShipFromAddressLine2
         +"\nreturnShipFromAddressCity :: "+returnShipFromAddressCity
         +"\nreturnShipFromAddressState :: "+returnShipFromAddressState
         +"\nreturnShipFromAddressPostalCode :: "+returnShipFromAddressPostalCode
         +"\nreturnShipFromCountrySymbol :: "+returnShipFromCountrySymbol
         +"\nreturnShipFromAddressPhone1 :: "+returnShipFromAddressPhone1
         );
         //Setting the ShipTo details from aascPackage info bean
      
        logger.info("shipperName :: "+shipperName);
         logger.info("connectshipSCS :::::"+connectshipSCS+":::::::::;");
         pkgWtVal                =   aascPackageBean.getWeight();
         pkgWtUom                =   nullStrToSpc(aascPackageBean.getUom());
         declaredCurrencyCode    =   nullStrToSpc(aascPackageBean.getDeclaredCurrCode());
         declaredVal             =   aascPackageBean.getRtnDeclaredValue();
         dimensionValue          =   nullStrToSpc(aascPackageBean.getPackageLength()+"x"+aascPackageBean.getPackageWidth()+"x"+aascPackageBean.getPackageHeight());
         packageDimensionUnits   =   nullStrToSpc(aascPackageBean.getDimensionUnits());
         packaging               =   nullStrToSpc(aascPackageBean.getPackaging());
         if (pkgWtUom.equalsIgnoreCase("LBS"))
         {
           pkgWtUom = "LB";
         }
         if (pkgWtUom.equalsIgnoreCase("KGS"))
         {
         pkgWtUom = "KG";
         }
//         additionalHandlingFlag  =   nullStrToSpc(aascPackageBean.getAdditionalHandlingFlag());
        //-------------------------------------------------------------------------------------
         protocol = nullStrToSpc(aascShipMethodInfo.getProtocol(carrierId));
         logger.info("protocol::"+protocol+":::::");
         hostName = nullStrToSpc(aascShipMethodInfo.getCarrierServerIPAddress(carrierId));            
         logger.info("hostName::"+hostName+":::::");
         prefix   = nullStrToSpc(aascShipMethodInfo.getCarrierPrefix(carrierId));            
         logger.info("prefix::"+prefix+":::::");
         port = nullStrToSpc(aascShipMethodInfo.getCarrierPort(carrierId));
         logger.info("port::"+port+":::::");
//         endPointURL=protocol+"://"+hostName+"/"+prefix;
         endPointURL=protocol+"://"+hostName+":"+port+"/"+prefix;
         logger.info("endPointURL::"+endPointURL+":::");
         WcfShipClient shipExecClient=new WcfShipClient(); 
         shipExecClient.setEndpoint(endPointURL);
         logger.info("calling " + shipExecClient.getEndpoint());
         //-----------------------------------------------------------------------------------
         ShipmentRequest shipmentRequestObject=new ShipmentRequest();
         //--------------------------------------------------------------------------------
         NameAddress nameAddress=new NameAddress();
         nameAddress.setCompany(returnShipFromCompanyName);
         nameAddress.setContact(returnShipFromContact);
         nameAddress.setAddress1(returnShipFromAddressLine1);
         nameAddress.setAddress2(returnShipFromAddressLine2);
         nameAddress.setCity(returnShipFromAddressCity);
         nameAddress.setState_province(returnShipFromAddressState);
         nameAddress.setCountry_ISO2(returnShipFromCountrySymbol);
         nameAddress.setPhone(returnShipFromAddressPhone1);
         nameAddress.setPostal_code(returnShipFromAddressPostalCode);
         Package packageObject=new Package();
         packageObject.setConsignee(nameAddress);
           packageObject.setShipper(shipperName);
         logger.info("  packageObject.getShipper() ::: "+packageObject.getShipper());
         packageObject.setSubcategory(connectshipSCS);
        
         Calendar cal = Calendar.getInstance();
                        logger.info("ShipDate :: "+shipDate);
                        cal.setTime(shipDate); 
         
         packageObject.setShipdate(new SimpleDateFormat("yyyy-MM-dd").format(shipDate));
         shipmentRequestObject.setDef_attr(packageObject);
         
         PrintRequest printRequest=new PrintRequest();
         printRequest.setPrintProfile_id(1);
//         printRequest.setMachineName("");
         printRequest.setConfigurationName("");
          
         PackageRequest returnPackageRequest=new PackageRequest();
         java.math.BigDecimal weight=new java.math.BigDecimal(pkgWtVal);
        returnPackageRequest.setWeight(weight);
        returnPackageRequest.setDimension(dimensionValue);
        returnPackageRequest.setWeight_unit(pkgWtUom);   
         declaredVal = aascPackageBean.getPackageDeclaredValue();
         logger.info("declaredVal :: "+declaredVal);
         java.math.BigDecimal declaredValue=new java.math.BigDecimal(declaredVal);
         returnPackageRequest.setDeclared_value_customs(declaredValue);   
         returnPackageRequest.setReturn_delivery(true);
         returnPackageRequest.setDescription(returnDescription);
         PackageRequest packageRequestObject[]=new PackageRequest[1];
         packageRequestObject[0]=returnPackageRequest;
          
          shipmentRequestObject.setDef_attr(packageObject);
          shipmentRequestObject.setPackages(packageRequestObject);
          shipmentRequestObject.setPrintRequest(printRequest);
          shipmentRequestObject.setManualShipment(false);
          shipmentRequestObject.setAllowEdit(false);

                
          SoxDictionaryItem sox[]=new SoxDictionaryItem[1];
          SoxDictionaryItem soxDictionaryItem =new SoxDictionaryItem();
          soxDictionaryItem.setKey(shipperName);
          soxDictionaryItem.setValue(shipperName);
          sox[0]=soxDictionaryItem;
                        

          ShipResponse ship_resp=shipExecClient.ship(shipmentRequestObject,false,sox);   
          //Gururaj added code for saving java xmls for ShipExec
           try
           {
           ByteArrayOutputStream baos = new ByteArrayOutputStream();
           XMLEncoder xmlEncoder = new XMLEncoder(baos);
           PersistenceDelegate pd = xmlEncoder.getPersistenceDelegate(Integer.class); 
           xmlEncoder.setPersistenceDelegate(BigDecimal.class, pd);
           xmlEncoder.writeObject(shipmentRequestObject);
           xmlEncoder.close();
           String xml = baos.toString();
                           System.out.println("--------------------------------------------------------\n"+xml);
           OutputStream outputStream = new FileOutputStream (labelpath + deliveryName + 
                                   "_ShipExec_" + timeStampStr + "_Return"+
                                   "_request.xml"); 
           baos.writeTo(outputStream);
           }
           catch(Exception e) {
               e.printStackTrace();
           }
           //Gururaj code end
          aascShipExecShipmentInfo = new AascShipExecShipmentInfo();
        //  System.out.println("labelpath::"+labelpath);
          parsedStatus = aascShipExecShipmentInfo.parseReturnShipmentResponse(ship_resp,aascPackageBean,aascShipmentOrderInfo,aascShipMethodInfo, labelpath);
          logger.info("parsedStatus:" + parsedStatus);
          if (parsedStatus.equalsIgnoreCase("success")) 
          {  
            responseStatus = 150;
          }
          else 
          {
            aascHeaderInfo.setMainError(parsedStatus);
            responseStatus = 151;                  
          }   
         
       }
       catch(Exception e)
       {
         logger.severe("Exception: "+e.getMessage());
         e.printStackTrace();
       }
       return responseStatus;
        
     }
     /** This method can replace the null values with nullString
      * @return String that is ""
      * @param obj-object of type Object
      */
     String nullStrToSpc(Object obj) {
         String spcStr = "";

         if (obj == null) {
             return spcStr;
         } else {
             return obj.toString();
         }
     }
    /**
     * @param src String
     * @return src String
     */
     
      private String encode(String src) 
      {
            src = replaceStr(src, "&", "&amp;");
            src = replaceStr(src, "\"", "&quot;");
            src = replaceStr(src, "<", "&lt;");
            src = replaceStr(src, "\\", "&#092;");
            return src;
     }
     /**
         This function returns a String based on the "src" String with all the
         instances of oldPattern replaced with newPattern.  There may be another
         way to do this but this seems reasonable.  It has been tested with:
         "", "&", "nothingn special", "test&", and "& test && double&"
         where the & gets replace with &amp;

         params
                 String src - the source string
                 String oldPattern - the pattern to replace
                 String newPattern - the new pattern to swap for the oldPattern

         returns:
                 String - the new String all swapped.

         */
    private String replaceStr(String src, String oldPattern, 
                               String newPattern) {

         String dst = ""; // the new bult up string based on src
         int i; // index of found token
         int last = 0; // last valid non token string data for concat  
         boolean done = false; // determines if we're done.

         if (src != null) {
             // while we'er not done, try finding and replacing
             while (!done) {
                 // search for the pattern...
                 i = src.indexOf(oldPattern, last);
                 // if it's not found from our last point in the src string....
                 if (i == -1) {
                     // we're done.
                     done = true;
                     // if our last point, happens to be before the end of the string
                     if (last < src.length()) {
                         // concat the rest of the string to our dst string
                         dst = dst.concat(src.substring(last, (src.length())));
                     }
                 } else {
                     // we found the pattern
                     if (i != last) {
                         // if the pattern's not at the very first char of our searching point....
                         // we need to concat the text up to that point..
                         dst = dst.concat(src.substring(last, i));
                     }
                     // update our last var to our current found pattern, plus the lenght of the pattern
                     last = i + oldPattern.length();
                     // concat the new pattern to the dst string
                     dst = dst.concat(newPattern);
                 }
             }
         } else {
             dst = src;
         }
         // finally, return the new string
         return dst;
     }
     
    public String convertDate(String convertDate) {
    logger.info("convertDate .... "+convertDate);
    try{
        if (convertDate != "") {
            String rdate = "";
            int len = convertDate.length();
            int index = convertDate.indexOf('-');
            int index1 = convertDate.lastIndexOf('-');

            String syear = convertDate.substring(index1 + 1, len).trim();

            String sdate = convertDate.substring(0, index).trim();

            String smon = convertDate.substring(index + 1, index1).trim();

            String intMonth = "";
            if (smon.equalsIgnoreCase("JAN"))
                intMonth = "01";
            else if (smon.equalsIgnoreCase("FEB"))
                intMonth = "02";
            else if (smon.equalsIgnoreCase("MAR"))
                intMonth = "03";
            else if (smon.equalsIgnoreCase("APR"))
                intMonth = "04";
            else if (smon.equalsIgnoreCase("MAY"))
                intMonth = "05";
            else if (smon.equalsIgnoreCase("JUN"))
                intMonth = "06";
            else if (smon.equalsIgnoreCase("JUL"))
                intMonth = "07";
            else if (smon.equalsIgnoreCase("AUG"))
                intMonth = "08";
            else if (smon.equalsIgnoreCase("SEP"))
                intMonth = "09";
            else if (smon.equalsIgnoreCase("OCT"))
                intMonth = "10";
            else if (smon.equalsIgnoreCase("NOV"))
                intMonth = "11";
            else if (smon.equalsIgnoreCase("DEC"))
                intMonth = "12";

            rdate = sdate + smon + syear;
            logger.info("##########  rdate ######" + rdate);
            return rdate;
       
        } 
        }catch(Exception e){
            logger.severe("Error in converting date "+e.getMessage());
        }
        return "";
    }     

    public String trim(String str) {

             return str.replaceFirst(" ", "");

                         }
}
